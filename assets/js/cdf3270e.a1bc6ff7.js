"use strict";(self.webpackChunkdora_rs_github_io=self.webpackChunkdora_rs_github_io||[]).push([[6636],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>g});var o=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,a=function(e,t){if(null==e)return{};var r,o,a={},n=Object.keys(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var r=e.components,a=e.mdxType,n=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(r),m=a,g=d["".concat(s,".").concat(m)]||d[m]||c[m]||n;return r?o.createElement(g,i(i({ref:t},u),{},{components:r})):o.createElement(g,i({ref:t},u))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=r.length,i=new Array(n);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<n;p++)i[p]=r[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8514:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>n,metadata:()=>l,toc:()=>p});var o=r(7462),a=(r(7294),r(3905));const n={},i="Hot Reloading",l={unversionedId:"guides/Development/hot-reload",id:"guides/Development/hot-reload",title:"Hot Reloading",description:"Making development of robotic application fast and easy is at the core of our thinking for dora-rs.",source:"@site/docs/guides/Development/hot-reload.md",sourceDirName:"guides/Development",slug:"/guides/Development/hot-reload",permalink:"/docs/guides/Development/hot-reload",draft:!1,editUrl:"https://github.com/dora-rs/dora-rs.github.io/edit/main/docs/guides/Development/hot-reload.md",tags:[],version:"current",frontMatter:{},sidebar:"guides",previous:{title:"Yolov5",permalink:"/docs/guides/getting-started/yolov5"},next:{title:"Logs",permalink:"/docs/guides/Debugging/logs"}},s={},p=[{value:"Purpose",id:"purpose",level:2},{value:"Usage",id:"usage",level:2},{value:"Fail-safe mechanism",id:"fail-safe-mechanism",level:2}],u={toc:p},d="wrapper";function c(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,o.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"hot-reloading"},"Hot Reloading"),(0,a.kt)("p",null,"Making development of robotic application fast and easy is at the core of our thinking for dora-rs."),(0,a.kt)("p",null,"To reduce development time, we have added a ",(0,a.kt)("inlineCode",{parentName:"p"},"hot-reload")," option for Python Operators that enables dora-rs to watch for changes. "),(0,a.kt)("p",null,"This is implemented in the likes of ",(0,a.kt)("inlineCode",{parentName:"p"},"npm start")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"uvicorn main:app --reload")),(0,a.kt)("h2",{id:"purpose"},"Purpose"),(0,a.kt)("p",null,"Sometimes reloading a robotic environment ( both virtual and physical ) might be really time-consuming.\nBeing able to hot-reload an operator makes iteration on change a lot quicker. "),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"dora start dataflow.yaml --attach --hot-reload\n")),(0,a.kt)("h2",{id:"fail-safe-mechanism"},"Fail-safe mechanism"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Failing the initialization on reloading is going to abort the reloading and not crash the operator."),(0,a.kt)("li",{parentName:"ul"},"State-values stored in the before-reloading Operator will be forwarded to the reloaded operator. "),(0,a.kt)("li",{parentName:"ul"},"If new state-value is been set in the initialization, they will be available in the reloaded operator."),(0,a.kt)("li",{parentName:"ul"},"If state-value has been changed in the initialization but was already used before, they will keep their before-reloading value ( used or not ). It is therefore not possible to change currently being used state-value stored in the Operator class. "),(0,a.kt)("li",{parentName:"ul"},"You can use global variable if you wish to have 'changeable' variables.")))}c.isMDXComponent=!0}}]);