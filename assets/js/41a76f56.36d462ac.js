"use strict";(self.webpackChunkdora_rs_github_io=self.webpackChunkdora_rs_github_io||[]).push([[558],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(r),m=n,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||s;return r?a.createElement(h,o(o({ref:t},u),{},{components:r})):a.createElement(h,o({ref:t},u))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:n,o[1]=i;for(var c=2;c<s;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4067:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var a=r(7462),n=(r(7294),r(3905));const s={},o="State Management",i={unversionedId:"references/state-management",id:"references/state-management",title:"State Management",description:"Most operations require to keep some sort of state between calls. This document describes the different ways to handle state in dora.",source:"@site/docs/references/state-management.md",sourceDirName:"references",slug:"/references/state-management",permalink:"/docs/references/state-management",draft:!1,editUrl:"https://github.com/dora-rs/dora-rs.github.io/edit/main/docs/references/state-management.md",tags:[],version:"current",frontMatter:{},sidebar:"references",previous:{title:"Design Overview",permalink:"/docs/references/overview"}},l={},c=[{value:"Internal State",id:"internal-state",level:2},{value:"Saving State",id:"saving-state",level:2},{value:"State Recovery",id:"state-recovery",level:3},{value:"Sharing State",id:"sharing-state",level:2},{value:"Custom Nodes",id:"custom-nodes",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"state-management"},"State Management"),(0,n.kt)("p",null,"Most operations require to keep some sort of state between calls. This document describes the different ways to handle state in dora."),(0,n.kt)("h2",{id:"internal-state"},"Internal State"),(0,n.kt)("p",null,"Operators are ",(0,n.kt)("inlineCode",{parentName:"p"},"struct")," or object instances, so they can keep internal state between invocations. This state is private to the operator. When an operator exits or crashes, its internal state is lost."),(0,n.kt)("h2",{id:"saving-state"},"Saving State"),(0,n.kt)("p",null,"To make themselves resilient against crashes, operators can use dora's state management. The dora runtime provides each operator with a private key-value store (KVS). Operators can save serialized state into the KVS by using the ",(0,n.kt)("inlineCode",{parentName:"p"},"save_state")," function of the runtime:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"fn save_state(key: &str, value: Vec<u8>)\n")),(0,n.kt)("p",null,"The runtime only stores the latest value for each key, so subsequent writes to the same key replace the earlier values. Serialization is required because the state must be self-contained (i.e. no pointers to other memory) and consistent (i.e. no half-updated state). Otherwise, state recovery might not be possible after an operator crash."),(0,n.kt)("p",null,"To keep the performance overhead of this function low, it is recommended to use a suitable serialization format that stores the data with minimal memory and compute overhead. Text-based formats such as JSON are not recommended. Also, fast-changing state should be stored under a separate key to minimize the amount of state that needs to be written."),(0,n.kt)("h3",{id:"state-recovery"},"State Recovery"),(0,n.kt)("p",null,"When an operator crashes, the dora runtime restarts it and supplies it with the last version of the saved state. It does this by calling the operator's ",(0,n.kt)("inlineCode",{parentName:"p"},"restore_state")," method:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"fn restore_state(&mut self, state: HashMap<String, Vec<u8>>)\n")),(0,n.kt)("p",null,"In this method, the operator should deserialize and apply all state entries, and perform all custom consistency checks that are necessary."),(0,n.kt)("h2",{id:"sharing-state"},"Sharing State"),(0,n.kt)("p",null,"To share state between operators, dora provides access to a node-local key-value store:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"fn kvs_write(key: &str, value: Vec<u8>)\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"fn kvs_read(key: &str) -> Vec<u8>\n")),(0,n.kt)("p",null,"Todo:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Consistency?"),(0,n.kt)("li",{parentName:"ul"},"Anna?")),(0,n.kt)("h2",{id:"custom-nodes"},"Custom Nodes"),(0,n.kt)("p",null,"Custom nodes have full control over the execution, so they can implement their own state management. Shared state can be accessed through the ",(0,n.kt)("inlineCode",{parentName:"p"},"kvs_read")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"kvs_write")," functions of the dora library, which are equivalent to the respective functions provided by the dora runtime."),(0,n.kt)("p",null,"Since custom nodes cannot use the recovery feature of the dora runtime, the ",(0,n.kt)("inlineCode",{parentName:"p"},"save_state"),"/",(0,n.kt)("inlineCode",{parentName:"p"},"restore_state")," functions are not available for them."))}d.isMDXComponent=!0}}]);