"use strict";(self.webpackChunkdora_rs_github_io=self.webpackChunkdora_rs_github_io||[]).push([[203],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=o,k=c["".concat(p,".").concat(m)]||c[m]||d[m]||r;return n?a.createElement(k,i(i({ref:t},u),{},{components:n})):a.createElement(k,i({ref:t},u))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4297:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:4},i="Yolov5",l={unversionedId:"guides/yolov5",id:"guides/yolov5",title:"Yolov5",description:"Making the video stream intelligent",source:"@site/docs/guides/yolov5.md",sourceDirName:"guides",slug:"/guides/yolov5",permalink:"/docs/guides/yolov5",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guides/yolov5.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"guides",previous:{title:"Webcam Plot",permalink:"/docs/guides/webcam_plot"}},p={},s=[{value:"Making the video stream intelligent",id:"making-the-video-stream-intelligent",level:2}],u={toc:s},c="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"yolov5"},"Yolov5"),(0,o.kt)("h2",{id:"making-the-video-stream-intelligent"},"Making the video stream intelligent"),(0,o.kt)("p",null,"Let's add a ",(0,o.kt)("inlineCode",{parentName:"p"},"yolov5")," object detection operator that has already been written for us in ",(0,o.kt)("inlineCode",{parentName:"p"},"./operators/yolov5_op.py"),". This will help us detect object as bounding boxes within the webcam stream."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# operators/yolov5_op.py\n\n{{#include ../../operators/yolov5_op.py }}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Operators are composed of:"),(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"__init__")," methods that help create the object."),(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"on_event")," methods that is called when an event is received.\nThere is currently 4 event types:"),(0,o.kt)("ul",{parentName:"blockquote"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"STOP"),": meaning that the operator was signalled to stop."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"INPUT"),": meannig that an input was received.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"You can use ",(0,o.kt)("inlineCode",{parentName:"li"},"dora_event['id']"),", to get the id. "),(0,o.kt)("li",{parentName:"ul"},"You can use ",(0,o.kt)("inlineCode",{parentName:"li"},"dora_event['data']"),", to get the data. "),(0,o.kt)("li",{parentName:"ul"},"You can use ",(0,o.kt)("inlineCode",{parentName:"li"},"dora_event['meatadata']"),", to get the metadata."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"INPUT_CLOSED"),": meannig that an input source was closed. This could be useful if the input is critical for the well behaviour of the operator."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ERROR"),": meaning that error message was received."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"UNKNOWN"),": meaning that an unknown message was received.")),(0,o.kt)("p",{parentName:"blockquote"},"We have encapsulated ",(0,o.kt)("inlineCode",{parentName:"p"},"input")," event in a ",(0,o.kt)("inlineCode",{parentName:"p"},"on_input")," method but this is not required.")),(0,o.kt)("p",null,"To add an operator within the dataflow. You need to explicit what the input and output are. You can reference node by their ids:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"# graphs/tutorials/webcam_yolov5.yaml\n\n{{#include ../../graphs/tutorials/webcam_yolov5.yaml }}\n")),(0,o.kt)("p",null,"In this case, we have connected the ",(0,o.kt)("inlineCode",{parentName:"p"},"webcam/image")," output to the ",(0,o.kt)("inlineCode",{parentName:"p"},"image")," input of yolov5. ",(0,o.kt)("inlineCode",{parentName:"p"},"yolov5/bbox")," is then connected to the ",(0,o.kt)("inlineCode",{parentName:"p"},"plot/obstacles_bbox"),"."),(0,o.kt)("p",null,"Inputs are prefixed by the node name to be able to separate name conflicts."),(0,o.kt)("p",null,"To run: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"dora up\ndora start graphs/tutorials/webcam_yolov5.yaml --attach\n")),(0,o.kt)("p",{align:"center"},(0,o.kt)("img",{src:"/img/webcam_yolov5.png",width:"800"})),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For more information on ",(0,o.kt)("inlineCode",{parentName:"p"},"yolov5"),", go on ",(0,o.kt)("a",{parentName:"p",href:"/docs/nodes_operators/yolov5_operator"},"our ",(0,o.kt)("inlineCode",{parentName:"a"},"yolov5")," detail page"))))}d.isMDXComponent=!0}}]);