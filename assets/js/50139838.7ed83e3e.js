"use strict";(self.webpackChunkdora_rs_github_io=self.webpackChunkdora_rs_github_io||[]).push([[2326],{9626:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>l});var o=t(4848),a=t(8453);const r={},s="Python API",d={id:"api/python-api",title:"Python API",description:"\x3c!---",source:"@site/docs/api/python-api.md",sourceDirName:"api",slug:"/api/python-api",permalink:"/docs/api/python-api",draft:!1,unlisted:!1,editUrl:"https://github.com/dora-rs/dora-rs.github.io/edit/main/docs/api/python-api.md",tags:[],version:"current",frontMatter:{}},i={},l=[{value:"Operator",id:"operator",level:2},{value:"Events",id:"events",level:3},{value:"<code>send_output</code>",id:"send_output",level:3},{value:"Example",id:"example",level:3},{value:"Custom Node",id:"custom-node",level:2},{value:"<code>Node()</code>",id:"node",level:3},{value:"<code>.next()</code>",id:"next",level:3},{value:"<code>.send_output(output_id, data, metadata)</code>",id:"send_outputoutput_id-data-metadata",level:3},{value:"<code>.dataflow_descriptor()</code>",id:"dataflow_descriptor",level:3},{value:"<code>.__version__</code>",id:"__version__",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"python-api",children:"Python API"}),"\n",(0,o.jsx)(n.h2,{id:"operator",children:"Operator"}),"\n",(0,o.jsxs)(n.p,{children:["The operator API is a framework for you to implement. The implemented operator will be managed by ",(0,o.jsx)(n.code,{children:"dora"}),". This framework enable us to make optimisation and provide advanced features. It is the recommended way of using ",(0,o.jsx)(n.code,{children:"dora"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["An operator requires an ",(0,o.jsx)(n.code,{children:"on_event"})," method and requires to return a ",(0,o.jsx)(n.code,{children:"DoraStatus"})," , depending of it needs to continue or stop."]}),"\n",(0,o.jsx)(n.h3,{id:"events",children:"Events"}),"\n",(0,o.jsx)(n.p,{children:"There is currently 4 event types that the on_event method receives:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"STOP"}),": meaning that the operator was signalled to stop."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"INPUT"}),": meannig that an input was received.","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["You can use ",(0,o.jsx)(n.code,{children:"dora_event['id']"}),", to get the id."]}),"\n",(0,o.jsxs)(n.li,{children:["You can use ",(0,o.jsx)(n.code,{children:"dora_event['data']"}),", to get the data as bytes."]}),"\n",(0,o.jsxs)(n.li,{children:["You can use ",(0,o.jsx)(n.code,{children:"dora_event['value']"}),", to get the data as arrow array."]}),"\n",(0,o.jsxs)(n.li,{children:["You can use ",(0,o.jsx)(n.code,{children:"dora_event['metadata']"}),", to get the metadata."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"INPUT_CLOSED"}),": meannig that an input source was closed. This could be useful if the input is critical for the well behaviour of the operator."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"ERROR"}),": meaning that error message was received."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"UNKNOWN"}),": meaning that an unknown message was received."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"send_output",children:(0,o.jsx)(n.code,{children:"send_output"})}),"\n",(0,o.jsxs)(n.p,{children:["To send an output from the operator, use ",(0,o.jsx)(n.code,{children:"send_output: Callable[[str, bytes | pa.Array, dict], None]"})," input method:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["the first argument is the ",(0,o.jsx)(n.code,{children:"output_id"})," as defined in your dataflow."]}),"\n",(0,o.jsx)(n.li,{children:"the second argument is the data as either bytes or pyarrow.Array for zero copy."}),"\n",(0,o.jsxs)(n.li,{children:["the third argument is dora metadata if you want ot link the tracing from one input into an output.\n",(0,o.jsx)(n.code,{children:'e.g.:  send_output("bbox", pa.array([100], type=pa.uint8()), dora_event["metadata"])'})]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\nimport numpy as np\nimport pyarrow as pa\n\nfrom dora import DoraStatus\nfrom ultralytics import YOLO\n\npa.array([])\n\nCAMERA_WIDTH = 640\nCAMERA_HEIGHT = 480\n\n\nclass Operator:\n    """\n    Infering object from images\n    """\n\n    def __init__(self):\n        self.model = YOLO("yolov8n.pt")\n\n    def on_event(\n        self,\n        dora_event,\n        send_output,\n    ) -> DoraStatus:\n        """Handle image\n        Args:\n            dora_input (dict) containing the "id", value, and "metadata"\n            send_output Callable[[str, bytes | pa.Array, Optional[dict]], None]:\n                Function for sending output to the dataflow:\n                - First argument is the `output_id`\n                - Second argument is the data as either bytes or `pa.Array`\n                - Third argument is dora metadata dict\n                e.g.: `send_output("bbox", pa.array([100], type=pa.uint8()), dora_event["metadata"])`\n        """\n        if dora_event["type"] == "INPUT":\n\n\n        frame = dora_input["value"].to_numpy().reshape((CAMERA_HEIGHT, CAMERA_WIDTH, 3))\n        frame = frame[:, :, ::-1]  # OpenCV image (BGR to RGB)\n        results = self.model(frame)  # includes NMS\n        # Process results\n        boxes = np.array(results[0].boxes.xyxy.cpu())\n        conf = np.array(results[0].boxes.conf.cpu())\n        label = np.array(results[0].boxes.cls.cpu())\n        # concatenate them together\n        arrays = np.concatenate((boxes, conf[:, None], label[:, None]), axis=1)\n\n        send_output("bbox", pa.array(arrays.ravel()), dora_input["metadata"])\n        return DoraStatus.CONTINUE\n'})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["For Python, we recommend to allocate the operator on a single runtime. A runtime will share the same GIL with several operators making those operators run almost sequentially. See: ",(0,o.jsx)(n.a,{href:"https://docs.rs/pyo3/latest/pyo3/marker/struct.Python.html#deadlocks",children:"https://docs.rs/pyo3/latest/pyo3/marker/struct.Python.html#deadlocks"})]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"custom-node",children:"Custom Node"}),"\n",(0,o.jsx)(n.h3,{id:"node",children:(0,o.jsx)(n.code,{children:"Node()"})}),"\n",(0,o.jsxs)(n.p,{children:["The custom node API lets you integrate ",(0,o.jsx)(n.code,{children:"dora"})," into your application.\nIt allows you to retrieve input and send output in any fashion you want."]}),"\n",(0,o.jsx)(n.p,{children:"Use with:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from dora import Node\n\nnode = Node()\n"})}),"\n",(0,o.jsx)(n.h3,{id:"next",children:(0,o.jsx)(n.code,{children:".next()"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:".next()"})," gives you the next input that the node has received.\nIt blocks until the next event becomes available.\nIt will return ",(0,o.jsx)(n.code,{children:"None"})," when all senders has been dropped."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"event = node.next()\n"})}),"\n",(0,o.jsx)(n.p,{children:"You can also iterate over the event stream with a loop"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'for event in node:\n   match event["type"]:\n       case "INPUT":\n           match event["id"]:\n                case "image":\n'})}),"\n",(0,o.jsx)(n.h3,{id:"send_outputoutput_id-data-metadata",children:(0,o.jsx)(n.code,{children:".send_output(output_id, data, metadata)"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"send_output"})," send data from the node."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"Args:\n   output_id: str,\n   data: Bytes|Arrow,\n   metadata: Option[Dict],\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'node.send_output("string", b"string", {"open_telemetry_context": "7632e76"})\n'})}),"\n",(0,o.jsx)(n.h3,{id:"dataflow_descriptor",children:(0,o.jsx)(n.code,{children:".dataflow_descriptor()"})}),"\n",(0,o.jsx)(n.p,{children:"Returns the full dataflow descriptor that this node is part of."}),"\n",(0,o.jsx)(n.p,{children:"This method returns the parsed dataflow YAML file."}),"\n",(0,o.jsx)(n.h3,{id:"__version__",children:(0,o.jsx)(n.code,{children:".__version__"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Returns the current version of dora python API.\n"})}),"\n",(0,o.jsx)(n.p,{children:"This command will show the current version of dora."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>d});var o=t(6540);const a={},r=o.createContext(a);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);