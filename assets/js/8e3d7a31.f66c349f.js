"use strict";(self.webpackChunkdora_rs_github_io=self.webpackChunkdora_rs_github_io||[]).push([[7095],{9145:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>s});var r=t(4848),o=t(8453);const i={},d="C API",a={id:"api/c-api",title:"C API",description:"Operator",source:"@site/docs/api/c-api.md",sourceDirName:"api",slug:"/api/c-api",permalink:"/docs/api/c-api",draft:!1,unlisted:!1,editUrl:"https://github.com/dora-rs/dora-rs.github.io/edit/main/docs/api/c-api.md",tags:[],version:"current",frontMatter:{}},c={},s=[{value:"Operator",id:"operator",level:2},{value:"Try it out!",id:"try-it-out",level:4},{value:"Custom Node",id:"custom-node",level:2},{value:"<code>init_dora_context_from_env</code>",id:"init_dora_context_from_env",level:3},{value:"<code>dora_next_event</code>",id:"dora_next_event",level:3},{value:"<code>dora_send_output</code>",id:"dora_send_output",level:3},{value:"Try it out!",id:"try-it-out-1",level:4}];function l(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"c-api",children:"C API"}),"\n",(0,r.jsx)(e.h2,{id:"operator",children:"Operator"}),"\n",(0,r.jsxs)(e.p,{children:["The operator API is a framework for you to implement. The implemented operator will be managed by ",(0,r.jsx)(e.code,{children:"dora"}),". This framework enable us to make optimisation and provide advanced features."]}),"\n",(0,r.jsxs)(e.p,{children:["The operator definition is composed of 3 functions, ",(0,r.jsx)(e.code,{children:"dora_init_operator"})," that initialise the operator and its context. ",(0,r.jsx)(e.code,{children:"dora_drop_operator"})," that free the memory, and ",(0,r.jsx)(e.code,{children:"dora_on_event"})," that action the logic of the operator on receiving an input."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:'#include "../../apis/c/operator/operator_api.h"\n#include <assert.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nDoraInitResult_t dora_init_operator(void)\n{\n    void *context = malloc(1);\n    char *context_char = (char *)context;\n    *context_char = 0;\n\n    DoraInitResult_t result = {.operator_context = context};\n    return result;\n}\n\nDoraResult_t dora_drop_operator(void *operator_context)\n{\n    free(operator_context);\n\n    DoraResult_t result = {};\n    return result;\n}\n\nOnEventResult_t dora_on_event(\n    const RawEvent_t *event,\n    const SendOutput_t *send_output,\n    void *operator_context)\n{\n'})}),"\n",(0,r.jsx)(e.h4,{id:"try-it-out",children:"Try it out!"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Create an ",(0,r.jsx)(e.code,{children:"operator.c"})," file:"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:'#include "../../apis/c/operator/operator_api.h"\n#include <assert.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nDoraInitResult_t dora_init_operator(void)\n{\n    void *context = malloc(1);\n    char *context_char = (char *)context;\n    *context_char = 0;\n\n    DoraInitResult_t result = {.operator_context = context};\n    return result;\n}\n\nDoraResult_t dora_drop_operator(void *operator_context)\n{\n    free(operator_context);\n\n    DoraResult_t result = {};\n    return result;\n}\n\nOnEventResult_t dora_on_event(\n    const RawEvent_t *event,\n    const SendOutput_t *send_output,\n    void *operator_context)\n{\n    char *counter = (char *)operator_context;\n\n    if (event->input != NULL)\n    {\n        // input event\n        Input_t *input = event->input;\n\n        char id[input->id.len + 1];\n        memcpy(id, input->id.ptr, input->id.len);\n        id[input->id.len] = 0;\n\n        if (strcmp(id, "message") == 0)\n        {\n            char data[input->data.len + 1];\n            memcpy(data, input->data.ptr, input->data.len);\n            data[input->data.len] = 0;\n\n            *counter += 1;\n            printf("C operator received message `%s`, counter: %i\\n", data, *counter);\n\n            char *out_id = "counter";\n            char *out_id_heap = strdup(out_id);\n\n            int data_alloc_size = 100;\n            char *out_data = (char *)malloc(data_alloc_size);\n            int count = snprintf(out_data, data_alloc_size, "The current counter value is %d", *counter);\n            assert(count >= 0 && count < 100);\n\n            Output_t output = {.id = {\n                                   .ptr = (uint8_t *)out_id_heap,\n                                   .len = strlen(out_id_heap),\n                                   .cap = strlen(out_id_heap) + 1,\n                               },\n                               .data = {.ptr = (uint8_t *)out_data, .len = strlen(out_data), .cap = data_alloc_size}};\n            DoraResult_t res = (send_output->send_output.call)(send_output->send_output.env_ptr, output);\n\n            OnEventResult_t result = {.result = res, .status = DORA_STATUS_CONTINUE};\n            return result;\n        }\n        else\n        {\n            printf("C operator received unexpected input %s, context: %i\\n", id, *counter);\n        }\n    }\n    if (event->stop)\n    {\n        printf("C operator received stop event\\n");\n    }\n\n    OnEventResult_t result = {.status = DORA_STATUS_CONTINUE};\n    return result;\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Build the operator:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:["Compile the ",(0,r.jsx)(e.code,{children:"operator.c"})," file into a shared library."]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["For example, use the following commands:","\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"clang -c operator.c -o build/operator.o -fdeclspec -fPIC\nclang -shared build/operator.o -o build/liboperator.so\n"})}),"\n","Omit the ",(0,r.jsx)(e.code,{children:"-fPIC"})," argument on Windows. Replace the ",(0,r.jsx)(e.code,{children:"liboperator.so"})," name with the shared library standard library prefix/extensions used on your OS, e.g. ",(0,r.jsx)(e.code,{children:".dll"})," on Windows."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"Link it in your graph as:"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"  - id: runtime-node\n    operators:\n      - id: c_operator\n        shared-library: build/operator\n        inputs:\n          message: c_node/message\n        outputs:\n          - counter\n"})}),"\n",(0,r.jsx)(e.h2,{id:"custom-node",children:"Custom Node"}),"\n",(0,r.jsxs)(e.p,{children:["The custom node API allow you to integrate ",(0,r.jsx)(e.code,{children:"dora"})," into your application. It allows you to retrieve input and send output in any fashion you want."]}),"\n",(0,r.jsx)(e.h3,{id:"init_dora_context_from_env",children:(0,r.jsx)(e.code,{children:"init_dora_context_from_env"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"init_dora_context_from_env"})," initiate a node from environment variables set by ",(0,r.jsx)(e.code,{children:"dora-coordinator"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"void *dora_context = init_dora_context_from_env();\n"})}),"\n",(0,r.jsx)(e.h3,{id:"dora_next_event",children:(0,r.jsx)(e.code,{children:"dora_next_event"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"dora_next_event"})," waits for the next event (e.g. an input). Use ",(0,r.jsx)(e.code,{children:"read_dora_event_type"})," to read the event's type. Inputs are of type ",(0,r.jsx)(e.code,{children:"DoraEventType_Input"}),". To extract the ID and data of an input event, use ",(0,r.jsx)(e.code,{children:"read_dora_input_id"}),"  and ",(0,r.jsx)(e.code,{children:"read_dora_input_data"})," on the returned pointer. It is safe to ignore any events and handle only the events that are relevant to the node."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"void *input = dora_next_input(dora_context);\n\n// read out the ID as a UTF8-encoded string\nchar *id;\nsize_t id_len;\nread_dora_input_id(input, &id, &id_len);\n\n// read out the data as a byte array\nchar *data;\nsize_t data_len;\nread_dora_input_data(input, &data, &data_len);\n"})}),"\n",(0,r.jsx)(e.h3,{id:"dora_send_output",children:(0,r.jsx)(e.code,{children:"dora_send_output"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"dora_send_output"})," send data from the node."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:'char out_id[] = "tick";\nchar out_data[50];\ndora_send_output(dora_context, out_id, strlen(out_id), out_data, out_data_len);\n'})}),"\n",(0,r.jsx)(e.h4,{id:"try-it-out-1",children:"Try it out!"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Create an ",(0,r.jsx)(e.code,{children:"node.c"})," file:"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include "../../apis/c/node/node_api.h"\n\n// sleep\n#ifdef _WIN32\n#include <Windows.h>\n#else\n#include <unistd.h>\n#endif\n\nint main()\n{\n    printf("[c node] Hello World\\n");\n\n    void *dora_context = init_dora_context_from_env();\n    if (dora_context == NULL)\n    {\n        fprintf(stderr, "failed to init dora context\\n");\n        return -1;\n    }\n\n    printf("[c node] dora context initialized\\n");\n\n    for (char i = 0; i < 100; i++)\n    {\n        void *event = dora_next_event(dora_context);\n        if (event == NULL)\n        {\n            printf("[c node] ERROR: unexpected end of event\\n");\n            return -1;\n        }\n\n        enum DoraEventType ty = read_dora_event_type(event);\n\n        if (ty == DoraEventType_Input)\n        {\n            char *data;\n            size_t data_len;\n            read_dora_input_data(event, &data, &data_len);\n\n            assert(data_len == 0);\n\n            char out_id[] = "message";\n            char out_data[50];\n            int out_data_len = sprintf(out_data, "loop iteration %d", i);\n\n            dora_send_output(dora_context, out_id, strlen(out_id), out_data, out_data_len);\n        }\n        else if (ty == DoraEventType_Stop)\n        {\n            printf("[c node] received stop event\\n");\n        }\n        else\n        {\n            printf("[c node] received unexpected event: %d\\n", ty);\n        }\n\n        free_dora_event(event);\n    }\n\n    printf("[c node] received 10 events\\n");\n\n    free_dora_context(dora_context);\n\n    printf("[c node] finished successfully\\n");\n\n    return 0;\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Build the custom nodes:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:["Create a ",(0,r.jsx)(e.code,{children:"build"})," folder in this directory (i.e., next to the ",(0,r.jsx)(e.code,{children:"node.c"})," file)"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:["Compile the ",(0,r.jsx)(e.code,{children:"dora-node-api-c"})," crate into a static library."]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Run ",(0,r.jsx)(e.code,{children:"cargo build -p dora-node-api-c --release"})]}),"\n",(0,r.jsxs)(e.li,{children:["The resulting staticlib is then available under ",(0,r.jsx)(e.code,{children:"../../target/release/libdora-node-api-c.a"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:["Compile the ",(0,r.jsx)(e.code,{children:"node.c"})," (e.g. using ",(0,r.jsx)(e.code,{children:"clang"}),") and link the staticlib"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["For example, use the following command:","\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"clang node.c <FLAGS> -ldora_node_api_c -L ../../target/release --output build/c_node\n"})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["The ",(0,r.jsx)(e.code,{children:"<FLAGS>"})," depend on the operating system and the libraries that the C node uses. The following flags are required for each OS:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Linux: ",(0,r.jsx)(e.code,{children:"-lm -lrt -ldl -pthread"})]}),"\n",(0,r.jsxs)(e.li,{children:["macOS: ",(0,r.jsx)(e.code,{children:"-framework CoreServices -framework Security -l System -l resolv -l pthread -l c -l m"})]}),"\n",(0,r.jsxs)(e.li,{children:["Windows:","\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"-ladvapi32 -luserenv -lkernel32 -lws2_32 -lbcrypt -lncrypt -lschannel -lntdll -liphlpapi\n-lcfgmgr32 -lcredui -lcrypt32 -lcryptnet -lfwpuclnt -lgdi32 -lmsimg32 -lmswsock -lole32\n-lopengl32 -lsecur32 -lshell32 -lsynchronization -luser32 -lwinspool\n-Wl,-nodefaultlib:libcmt -D_DLL -lmsvcrt\n"})}),"\n","Also: On Windows, the output file should have an ",(0,r.jsx)(e.code,{children:".exe"})," extension: ",(0,r.jsx)(e.code,{children:"--output build/c_node.exe"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:["Repeat the previous step for the ",(0,r.jsx)(e.code,{children:"sink.c"})," executable"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"Link it in your graph as:"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"  - id: c_sink\n    custom:\n      source: build/c_sink\n      inputs:\n        counter: runtime-node/c_operator/counter\n"})})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>d,x:()=>a});var r=t(6540);const o={},i=r.createContext(o);function d(n){const e=r.useContext(i);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:d(n.components),r.createElement(i.Provider,{value:e},n.children)}}}]);