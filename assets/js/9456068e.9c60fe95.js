"use strict";(self.webpackChunkdora_rs_github_io=self.webpackChunkdora_rs_github_io||[]).push([[2414],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>k});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),s=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=s(r),f=a,k=c["".concat(u,".").concat(f)]||c[f]||m[f]||i;return r?n.createElement(k,l(l({ref:t},p),{},{components:r})):n.createElement(k,l({ref:t},p))}));function k(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=f;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[c]="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},2362:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const i={},l="Framework",o={unversionedId:"references/library-vs-framework",id:"references/library-vs-framework",title:"Framework",description:"- Runtime process",source:"@site/docs/references/library-vs-framework.md",sourceDirName:"references",slug:"/references/library-vs-framework",permalink:"/docs/references/library-vs-framework",draft:!1,editUrl:"https://github.com/dora-rs/dora-rs.github.io/edit/main/docs/references/library-vs-framework.md",tags:[],version:"current",frontMatter:{},sidebar:"references",previous:{title:"Middleware layer abstraction(MLA)",permalink:"/docs/references/communication-layer"},next:{title:"Design Overview",permalink:"/docs/references/overview"}},u={},s=[],p={toc:s},c="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"framework"},"Framework"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Runtime process",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Talks with other runtime processes"),(0,a.kt)("li",{parentName:"ul"},"Across machines"),(0,a.kt)("li",{parentName:"ul"},"loop",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"listen for inputs"),(0,a.kt)("li",{parentName:"ul"},"invoke corresponding operator(s)"),(0,a.kt)("li",{parentName:"ul"},"collect and forward outputs"))))),(0,a.kt)("li",{parentName:"ul"},"Operators",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Connected to runtime",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Via TCP socket (can be a separate process)",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Single connection with high level message format, or"),(0,a.kt)("li",{parentName:"ul"},"Separate connection per input/output"))),(0,a.kt)("li",{parentName:"ul"},"Dynamically linked as shared library",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Runtime invokes specific handler message directly with input(s)"),(0,a.kt)("li",{parentName:"ul"},"Outputs either:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Return a collection as result"),(0,a.kt)("li",{parentName:"ul"},"Call runtime function to send out result"))))))),(0,a.kt)("li",{parentName:"ul"},"Input aggregation (i.e. waiting until multiple inputs are available)",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"by runtime -> aggregation specified in config file"),(0,a.kt)("li",{parentName:"ul"},"by operator -> custom handling possible")))))),(0,a.kt)("h1",{id:"library"},"Library"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"All sources/operator/sinks are separate processes that link a runtime library"),(0,a.kt)("li",{parentName:"ul"},'"Orchestrator" process',(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"reads config file"),(0,a.kt)("li",{parentName:"ul"},"launches processes accordingly"),(0,a.kt)("li",{parentName:"ul"},"passes node config",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"as argument"),(0,a.kt)("li",{parentName:"ul"},"via env variable"),(0,a.kt)("li",{parentName:"ul"},"including input and output names"))))),(0,a.kt)("li",{parentName:"ul"},"Runtime library provides (async) functions to",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"wait for one or multiple inputs"),(0,a.kt)("li",{parentName:"ul"},"with timeouts"),(0,a.kt)("li",{parentName:"ul"},"send out outputs")))))}m.isMDXComponent=!0}}]);