"use strict";(self.webpackChunkdora_rs_github_io=self.webpackChunkdora_rs_github_io||[]).push([[2966],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},c="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},_=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),_=r,m=c["".concat(d,".").concat(_)]||c[_]||s[_]||o;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=_;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}_.displayName="MDXCreateElement"},5943:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={},i="C API",l={unversionedId:"api/c-api",id:"api/c-api",title:"C API",description:"Operator",source:"@site/docs/api/c-api.md",sourceDirName:"api",slug:"/api/c-api",permalink:"/docs/api/c-api",draft:!1,editUrl:"https://github.com/dora-rs/dora-rs.github.io/edit/main/docs/api/c-api.md",tags:[],version:"current",frontMatter:{}},d={},p=[{value:"Operator",id:"operator",level:2},{value:"Try it out!",id:"try-it-out",level:4},{value:"Custom Node",id:"custom-node",level:2},{value:"<code>init_dora_context_from_env</code>",id:"init_dora_context_from_env",level:3},{value:"<code>dora_next_event</code>",id:"dora_next_event",level:3},{value:"<code>dora_send_output</code>",id:"dora_send_output",level:3},{value:"Try it out!",id:"try-it-out-1",level:4}],u={toc:p},c="wrapper";function s(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"c-api"},"C API"),(0,r.kt)("h2",{id:"operator"},"Operator"),(0,r.kt)("p",null,"The operator API is a framework for you to implement. The implemented operator will be managed by ",(0,r.kt)("inlineCode",{parentName:"p"},"dora"),". This framework enable us to make optimisation and provide advanced features."),(0,r.kt)("p",null,"The operator definition is composed of 3 functions, ",(0,r.kt)("inlineCode",{parentName:"p"},"dora_init_operator")," that initialise the operator and its context. ",(0,r.kt)("inlineCode",{parentName:"p"},"dora_drop_operator")," that free the memory, and ",(0,r.kt)("inlineCode",{parentName:"p"},"dora_on_event")," that action the logic of the operator on receiving an input."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'#include "../../apis/c/operator/operator_api.h"\n#include <assert.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nDoraInitResult_t dora_init_operator(void)\n{\n    void *context = malloc(1);\n    char *context_char = (char *)context;\n    *context_char = 0;\n\n    DoraInitResult_t result = {.operator_context = context};\n    return result;\n}\n\nDoraResult_t dora_drop_operator(void *operator_context)\n{\n    free(operator_context);\n\n    DoraResult_t result = {};\n    return result;\n}\n\nOnEventResult_t dora_on_event(\n    const RawEvent_t *event,\n    const SendOutput_t *send_output,\n    void *operator_context)\n{\n')),(0,r.kt)("h4",{id:"try-it-out"},"Try it out!"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create an ",(0,r.kt)("inlineCode",{parentName:"li"},"operator.c")," file:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'#include "../../apis/c/operator/operator_api.h"\n#include <assert.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nDoraInitResult_t dora_init_operator(void)\n{\n    void *context = malloc(1);\n    char *context_char = (char *)context;\n    *context_char = 0;\n\n    DoraInitResult_t result = {.operator_context = context};\n    return result;\n}\n\nDoraResult_t dora_drop_operator(void *operator_context)\n{\n    free(operator_context);\n\n    DoraResult_t result = {};\n    return result;\n}\n\nOnEventResult_t dora_on_event(\n    const RawEvent_t *event,\n    const SendOutput_t *send_output,\n    void *operator_context)\n{\n    char *counter = (char *)operator_context;\n\n    if (event->input != NULL)\n    {\n        // input event\n        Input_t *input = event->input;\n\n        char id[input->id.len + 1];\n        memcpy(id, input->id.ptr, input->id.len);\n        id[input->id.len] = 0;\n\n        if (strcmp(id, "message") == 0)\n        {\n            char data[input->data.len + 1];\n            memcpy(data, input->data.ptr, input->data.len);\n            data[input->data.len] = 0;\n\n            *counter += 1;\n            printf("C operator received message `%s`, counter: %i\\n", data, *counter);\n\n            char *out_id = "counter";\n            char *out_id_heap = strdup(out_id);\n\n            int data_alloc_size = 100;\n            char *out_data = (char *)malloc(data_alloc_size);\n            int count = snprintf(out_data, data_alloc_size, "The current counter value is %d", *counter);\n            assert(count >= 0 && count < 100);\n\n            Output_t output = {.id = {\n                                   .ptr = (uint8_t *)out_id_heap,\n                                   .len = strlen(out_id_heap),\n                                   .cap = strlen(out_id_heap) + 1,\n                               },\n                               .data = {.ptr = (uint8_t *)out_data, .len = strlen(out_data), .cap = data_alloc_size}};\n            DoraResult_t res = (send_output->send_output.call)(send_output->send_output.env_ptr, output);\n\n            OnEventResult_t result = {.result = res, .status = DORA_STATUS_CONTINUE};\n            return result;\n        }\n        else\n        {\n            printf("C operator received unexpected input %s, context: %i\\n", id, *counter);\n        }\n    }\n    if (event->stop)\n    {\n        printf("C operator received stop event\\n");\n    }\n\n    OnEventResult_t result = {.status = DORA_STATUS_CONTINUE};\n    return result;\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Build the operator:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Compile the ",(0,r.kt)("inlineCode",{parentName:"p"},"operator.c")," file into a shared library."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"For example, use the following commands:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"clang -c operator.c -o build/operator.o -fdeclspec -fPIC\nclang -shared build/operator.o -o build/liboperator.so\n")),"Omit the ",(0,r.kt)("inlineCode",{parentName:"li"},"-fPIC")," argument on Windows. Replace the ",(0,r.kt)("inlineCode",{parentName:"li"},"liboperator.so")," name with the shared library standard library prefix/extensions used on your OS, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},".dll")," on Windows."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Link it in your graph as:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"  - id: runtime-node\n    operators:\n      - id: c_operator\n        shared-library: build/operator\n        inputs:\n          message: c_node/message\n        outputs:\n          - counter\n")),(0,r.kt)("h2",{id:"custom-node"},"Custom Node"),(0,r.kt)("p",null,"The custom node API allow you to integrate ",(0,r.kt)("inlineCode",{parentName:"p"},"dora")," into your application. It allows you to retrieve input and send output in any fashion you want. "),(0,r.kt)("h3",{id:"init_dora_context_from_env"},(0,r.kt)("inlineCode",{parentName:"h3"},"init_dora_context_from_env")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"init_dora_context_from_env")," initiate a node from environment variables set by ",(0,r.kt)("inlineCode",{parentName:"p"},"dora-coordinator")," "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"void *dora_context = init_dora_context_from_env();\n")),(0,r.kt)("h3",{id:"dora_next_event"},(0,r.kt)("inlineCode",{parentName:"h3"},"dora_next_event")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"dora_next_event")," waits for the next event (e.g. an input). Use ",(0,r.kt)("inlineCode",{parentName:"p"},"read_dora_event_type")," to read the event's type. Inputs are of type ",(0,r.kt)("inlineCode",{parentName:"p"},"DoraEventType_Input"),". To extract the ID and data of an input event, use ",(0,r.kt)("inlineCode",{parentName:"p"},"read_dora_input_id"),"  and ",(0,r.kt)("inlineCode",{parentName:"p"},"read_dora_input_data")," on the returned pointer. It is safe to ignore any events and handle only the events that are relevant to the node."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"void *input = dora_next_input(dora_context);\n\n// read out the ID as a UTF8-encoded string\nchar *id;\nsize_t id_len;\nread_dora_input_id(input, &id, &id_len);\n\n// read out the data as a byte array\nchar *data;\nsize_t data_len;\nread_dora_input_data(input, &data, &data_len);\n")),(0,r.kt)("h3",{id:"dora_send_output"},(0,r.kt)("inlineCode",{parentName:"h3"},"dora_send_output")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"dora_send_output")," send data from the node."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'char out_id[] = "tick";\nchar out_data[50];\ndora_send_output(dora_context, out_id, strlen(out_id), out_data, out_data_len);\n')),(0,r.kt)("h4",{id:"try-it-out-1"},"Try it out!"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create an ",(0,r.kt)("inlineCode",{parentName:"li"},"node.c")," file:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include "../../apis/c/node/node_api.h"\n\n// sleep\n#ifdef _WIN32\n#include <Windows.h>\n#else\n#include <unistd.h>\n#endif\n\nint main()\n{\n    printf("[c node] Hello World\\n");\n\n    void *dora_context = init_dora_context_from_env();\n    if (dora_context == NULL)\n    {\n        fprintf(stderr, "failed to init dora context\\n");\n        return -1;\n    }\n\n    printf("[c node] dora context initialized\\n");\n\n    for (char i = 0; i < 100; i++)\n    {\n        void *event = dora_next_event(dora_context);\n        if (event == NULL)\n        {\n            printf("[c node] ERROR: unexpected end of event\\n");\n            return -1;\n        }\n\n        enum DoraEventType ty = read_dora_event_type(event);\n\n        if (ty == DoraEventType_Input)\n        {\n            char *data;\n            size_t data_len;\n            read_dora_input_data(event, &data, &data_len);\n\n            assert(data_len == 0);\n\n            char out_id[] = "message";\n            char out_data[50];\n            int out_data_len = sprintf(out_data, "loop iteration %d", i);\n\n            dora_send_output(dora_context, out_id, strlen(out_id), out_data, out_data_len);\n        }\n        else if (ty == DoraEventType_Stop)\n        {\n            printf("[c node] received stop event\\n");\n        }\n        else\n        {\n            printf("[c node] received unexpected event: %d\\n", ty);\n        }\n\n        free_dora_event(event);\n    }\n\n    printf("[c node] received 10 events\\n");\n\n    free_dora_context(dora_context);\n\n    printf("[c node] finished successfully\\n");\n\n    return 0;\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Build the custom nodes:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"build")," folder in this directory (i.e., next to the ",(0,r.kt)("inlineCode",{parentName:"p"},"node.c")," file)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Compile the ",(0,r.kt)("inlineCode",{parentName:"p"},"dora-node-api-c")," crate into a static library."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Run ",(0,r.kt)("inlineCode",{parentName:"li"},"cargo build -p dora-node-api-c --release")),(0,r.kt)("li",{parentName:"ul"},"The resulting staticlib is then available under ",(0,r.kt)("inlineCode",{parentName:"li"},"../../target/release/libdora-node-api-c.a"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Compile the ",(0,r.kt)("inlineCode",{parentName:"p"},"node.c")," (e.g. using ",(0,r.kt)("inlineCode",{parentName:"p"},"clang"),") and link the staticlib"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"For example, use the following command:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"clang node.c <FLAGS> -ldora_node_api_c -L ../../target/release --output build/c_node\n"))),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"<FLAGS>")," depend on the operating system and the libraries that the C node uses. The following flags are required for each OS:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Linux: ",(0,r.kt)("inlineCode",{parentName:"li"},"-lm -lrt -ldl -pthread")),(0,r.kt)("li",{parentName:"ul"},"macOS: ",(0,r.kt)("inlineCode",{parentName:"li"},"-framework CoreServices -framework Security -l System -l resolv -l pthread -l c -l m")),(0,r.kt)("li",{parentName:"ul"},"Windows:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"-ladvapi32 -luserenv -lkernel32 -lws2_32 -lbcrypt -lncrypt -lschannel -lntdll -liphlpapi\n-lcfgmgr32 -lcredui -lcrypt32 -lcryptnet -lfwpuclnt -lgdi32 -lmsimg32 -lmswsock -lole32\n-lopengl32 -lsecur32 -lshell32 -lsynchronization -luser32 -lwinspool\n-Wl,-nodefaultlib:libcmt -D_DLL -lmsvcrt\n")),"Also: On Windows, the output file should have an ",(0,r.kt)("inlineCode",{parentName:"li"},".exe")," extension: ",(0,r.kt)("inlineCode",{parentName:"li"},"--output build/c_node.exe")))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Repeat the previous step for the ",(0,r.kt)("inlineCode",{parentName:"p"},"sink.c")," executable")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Link it in your graph as:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"  - id: c_sink\n    custom:\n      source: build/c_sink\n      inputs:\n        counter: runtime-node/c_operator/counter\n")))}s.isMDXComponent=!0}}]);