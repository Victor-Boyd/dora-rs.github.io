"use strict";(self.webpackChunkdora_rs_github_io=self.webpackChunkdora_rs_github_io||[]).push([[440],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>g});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),u=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(a),m=n,g=d["".concat(s,".").concat(m)]||d[m]||c[m]||l;return a?r.createElement(g,o(o({ref:t},p),{},{components:a})):r.createElement(g,o({ref:t},p))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:n,o[1]=i;for(var u=2;u<l;u++)o[u]=a[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1559:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var r=a(7462),n=(a(7294),a(3905));const l={},o="Creating your first dataflow",i={unversionedId:"guides/getting-started/first-dataflow",id:"guides/getting-started/first-dataflow",title:"Creating your first dataflow",description:"Create a Rust workspace",source:"@site/docs/guides/getting-started/first-dataflow.md",sourceDirName:"guides/getting-started",slug:"/guides/getting-started/first-dataflow",permalink:"/docs/guides/getting-started/first-dataflow",draft:!1,editUrl:"https://github.com/dora-rs/dora-rs.github.io/edit/main/docs/guides/getting-started/first-dataflow.md",tags:[],version:"current",frontMatter:{},sidebar:"guides",previous:{title:"Uninstalling",permalink:"/docs/guides/Installation/uninstalling"},next:{title:"Webcam Plot",permalink:"/docs/guides/getting-started/webcam_plot"}},s={},u=[{value:"Create a Rust workspace",id:"create-a-rust-workspace",level:3},{value:"Write your first node",id:"write-your-first-node",level:3},{value:"Write your first operator",id:"write-your-first-operator",level:3},{value:"Write your sink node",id:"write-your-sink-node",level:3},{value:"Compile everything",id:"compile-everything",level:3},{value:"Write a graph definition",id:"write-a-graph-definition",level:3},{value:"Run it!",id:"run-it",level:3}],p={toc:u},d="wrapper";function c(e){let{components:t,...a}=e;return(0,n.kt)(d,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"creating-your-first-dataflow"},"Creating your first dataflow"),(0,n.kt)("h3",{id:"create-a-rust-workspace"},"Create a Rust workspace"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Initiate the workspace with:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir my_first_dataflow\ncd my_first_dataflow\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Create the Cargo.toml file that will configure the entire workspace:")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"Cargo.toml")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-toml"},'[workspace]\n\nmembers = [\n    "rust-dataflow-example-node",\n]\n')),(0,n.kt)("h3",{id:"write-your-first-node"},"Write your first node"),(0,n.kt)("p",null,"Let's write a node which sends the current time periodically. Let's make it after 100 iterations. The other nodes/operators will then exit as well because all sources closed."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Generate a new Rust binary (application):")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cargo new rust-dataflow-example-node\n")),(0,n.kt)("p",null,"with ",(0,n.kt)("inlineCode",{parentName:"p"},"Cargo.toml"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-toml"},"{{#include ../../examples/rust-dataflow/node/Cargo.toml}}\n")),(0,n.kt)("p",null,"with ",(0,n.kt)("inlineCode",{parentName:"p"},"src/main.rs"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"{{#include ../../examples/rust-dataflow/node/src/main.rs}}\n")),(0,n.kt)("h3",{id:"write-your-first-operator"},"Write your first operator"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Generate a new Rust library:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cargo new rust-dataflow-example-operator --lib\n")),(0,n.kt)("p",null,"with ",(0,n.kt)("inlineCode",{parentName:"p"},"Cargo.toml"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-toml"},"{{#include ../../examples/rust-dataflow/operator/Cargo.toml}}\n")),(0,n.kt)("p",null,"with ",(0,n.kt)("inlineCode",{parentName:"p"},"src/lib.rs"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"{{#include ../../examples/rust-dataflow/operator/src/lib.rs}}\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"And modify the root ",(0,n.kt)("inlineCode",{parentName:"li"},"Cargo.toml"),":")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-toml="},'[workspace]\n\nmembers = [\n    "rust-dataflow-example-node",\n    "rust-dataflow-example-operator",\n]\n')),(0,n.kt)("h3",{id:"write-your-sink-node"},"Write your sink node"),(0,n.kt)("p",null,"Let's write a ",(0,n.kt)("inlineCode",{parentName:"p"},"logger")," which will print incoming data."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Generate a new Rust binary (application):")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cargo new sink_logger\n")),(0,n.kt)("p",null,"with ",(0,n.kt)("inlineCode",{parentName:"p"},"Cargo.toml"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-toml"},"{{#include ../../examples/rust-dataflow/sink/Cargo.toml}}\n")),(0,n.kt)("p",null,"with ",(0,n.kt)("inlineCode",{parentName:"p"},"src/main.rs"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"{{#include ../../examples/rust-dataflow/sink/src/main.rs}}\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"And modify the root ",(0,n.kt)("inlineCode",{parentName:"li"},"Cargo.toml"),":")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-toml="},'[workspace]\n\nmembers = [\n    "rust-dataflow-example-node",\n    "rust-dataflow-example-operator",\n    "rust-dataflow-example-sink"\n]\n')),(0,n.kt)("h3",{id:"compile-everything"},"Compile everything"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cargo build --all --release\n")),(0,n.kt)("h3",{id:"write-a-graph-definition"},"Write a graph definition"),(0,n.kt)("p",null,"Let's write the graph definition so that the nodes know who to communicate with."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"dataflow.yml")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"{{#include ../../examples/rust-dataflow/dataflow.yml}}\n")),(0,n.kt)("h3",{id:"run-it"},"Run it!"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Run the ",(0,n.kt)("inlineCode",{parentName:"li"},"dataflow"),": ")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"dora-daemon --run-dataflow dataflow.yml\n")))}c.isMDXComponent=!0}}]);