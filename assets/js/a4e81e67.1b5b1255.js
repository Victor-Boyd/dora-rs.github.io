"use strict";(self.webpackChunkdora_rs_github_io=self.webpackChunkdora_rs_github_io||[]).push([[527],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},_=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(t),_=o,f=u["".concat(p,".").concat(_)]||u[_]||c[_]||a;return t?r.createElement(f,i(i({ref:n},d),{},{components:t})):r.createElement(f,i({ref:n},d))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=_;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}_.displayName="MDXCreateElement"},8788:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(7462),o=(t(7294),t(3905));const a={},i="PID Operator",s={unversionedId:"nodes_operators/pid_control_op",id:"nodes_operators/pid_control_op",title:"PID Operator",description:"\x3c!---",source:"@site/docs/nodes_operators/pid_control_op.md",sourceDirName:"nodes_operators",slug:"/nodes_operators/pid_control_op",permalink:"/docs/nodes_operators/pid_control_op",draft:!1,editUrl:"https://github.com/dora-rs/dora-rs.github.io/edit/main/docs/nodes_operators/pid_control_op.md",tags:[],version:"current",frontMatter:{},sidebar:"nodes_operators",previous:{title:"Obstacle Location Operator",permalink:"/docs/nodes_operators/obstacle_location_op"},next:{title:"Plot Operator",permalink:"/docs/nodes_operators/plot"}},p={},l=[{value:"<code>__init__()</code>",id:"__init__",level:3},{value:"<code>.on_event(...)</code>",id:"on_event",level:3},{value:"<code>.on_input(...)</code>",id:"on_input",level:3}],d={toc:l},u="wrapper";function c(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"pid-operator"},"PID Operator"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\n    Compute the throttle, target angle and brake given a `position`, a `speed` and a `waypoints`.\n    \n")),(0,o.kt)("h3",{id:"__init__"},(0,o.kt)("inlineCode",{parentName:"h3"},"__init__()")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Source Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"    def __init__(self):\n        self.waypoints = []\n        self.target_speeds = []\n        self.metadata = {}\n        self.position = []\n        self.speed = []\n        self.previous_position = []\n        self.current_speed = []\n        self.previous_time = time.time()\n\n\n"))),(0,o.kt)("h3",{id:"on_event"},(0,o.kt)("inlineCode",{parentName:"h3"},".on_event(...)")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Source Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\n    def on_event(\n        self,\n        dora_event: dict,\n        send_output: Callable[[str, bytes], None],\n    ) -> DoraStatus:\n        if dora_event["type"] == "INPUT":\n            return self.on_input(dora_event, send_output)\n        return DoraStatus.CONTINUE\n\n\n'))),(0,o.kt)("h3",{id:"on_input"},(0,o.kt)("inlineCode",{parentName:"h3"},".on_input(...)")),(0,o.kt)("p",null,"Handle input.\nArgs:\ndora_input",'["id"]',"  (str): Id of the input declared in the yaml configuration\ndora_input",'["value"]'," (arrow.array(UInt8)): Bytes message of the input\nsend_output (Callable[","[str, bytes]","]): Function enabling sending output back to dora."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Source Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\n    def on_input(\n        self,\n        dora_input: dict,\n        send_output: Callable[[str, bytes], None],\n    ):\n        """Handle input.\n        Args:\n            dora_input["id"]  (str): Id of the input declared in the yaml configuration\n            dora_input["value"] (arrow.array(UInt8)): Bytes message of the input\n            send_output (Callable[[str, bytes]]): Function enabling sending output back to dora.\n        """\n\n        if "position" == dora_input["id"]:\n            self.position = dora_input["value"].to_numpy().view(np.float32)\n            return DoraStatus.CONTINUE\n\n        elif dora_input["id"] == "speed":\n            self.speed = np.array(dora_input["value"]).view(np.float32)\n            return DoraStatus.CONTINUE\n\n        elif "waypoints" == dora_input["id"]:\n            waypoints = dora_input["value"].to_numpy().view(np.float32)\n            waypoints = waypoints.reshape((-1, 3))\n\n            self.target_speeds = waypoints[:, 2]\n            self.waypoints = waypoints[:, :2]\n            self.metadata = dora_input["metadata"]\n\n        if len(self.position) == 0 or len(self.speed) == 0:\n            return DoraStatus.CONTINUE\n\n        if len(self.waypoints) == 0:\n            send_output(\n                "control",\n                pa.array(\n                    np.array([0, 0, 1], np.float16).view(np.uint8).ravel()\n                ),\n                self.metadata,\n            )\n            return DoraStatus.CONTINUE\n\n        [x, y, _, rx, ry, rz, rw] = self.position\n        [_, _, yaw] = R.from_quat([rx, ry, rz, rw]).as_euler(\n            "xyz", degrees=False\n        )\n        distances = pairwise_distances(self.waypoints, np.array([[x, y]])).T[0]\n\n        index = distances > MIN_PID_WAYPOINT_DISTANCE\n        self.waypoints = self.waypoints[index]\n        self.target_speeds = self.target_speeds[index]\n        distances = distances[index]\n\n        if len(self.waypoints) == 0:\n            target_angle = 0\n            target_speed = 0\n        else:\n            argmin_distance = np.argmin(distances)\n\n            ## Retrieve the closest point to the steer distance\n            target_location = self.waypoints[argmin_distance]\n\n            target_speed = self.target_speeds[argmin_distance]\n\n            ## Compute the angle of steering\n            target_vector = target_location - [x, y]\n\n            target_angle = get_angle(\n                math.atan2(target_vector[1], target_vector[0]), yaw\n            )\n\n        throttle, brake = compute_throttle_and_brake(\n            pid, LA.norm(self.speed), target_speed\n        )\n\n        send_output(\n            "control",\n            pa.array(\n                np.array([throttle, target_angle, brake], np.float16).view(\n                    np.uint8\n                )\n            ),\n            self.metadata,\n        )\n        return DoraStatus.CONTINUE\n\n\n'))))}c.isMDXComponent=!0}}]);