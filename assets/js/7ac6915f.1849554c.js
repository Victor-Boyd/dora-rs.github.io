"use strict";(self.webpackChunkdora_rs_github_io=self.webpackChunkdora_rs_github_io||[]).push([[2611],{8532:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var n=o(4848),a=o(8453);const r={},s="Dataflow Specification",i={id:"api/dataflow-config",title:"Dataflow Specification",description:"Dataflows are specified through a YAML file. This section presents our current draft for the file format. It only includes basic functionality for now, we will extend it later when we introduce more advanced features.",source:"@site/docs/api/dataflow-config.md",sourceDirName:"api",slug:"/api/dataflow-config",permalink:"/docs/api/dataflow-config",draft:!1,unlisted:!1,editUrl:"https://github.com/dora-rs/dora-rs.github.io/edit/main/docs/api/dataflow-config.md",tags:[],version:"current",frontMatter:{}},d={},l=[{value:"Dataflow",id:"dataflow",level:2},{value:"Inputs and Outputs",id:"inputs-and-outputs",level:3},{value:"Nodes",id:"nodes",level:2},{value:"Custom Nodes",id:"custom-nodes",level:3},{value:"Operators",id:"operators",level:2},{value:"Example",id:"example",level:2},{value:"TODO: Integration with ROS 1/2",id:"todo-integration-with-ros-12",level:2}];function u(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"dataflow-specification",children:"Dataflow Specification"}),"\n",(0,n.jsx)(t.p,{children:"Dataflows are specified through a YAML file. This section presents our current draft for the file format. It only includes basic functionality for now, we will extend it later when we introduce more advanced features."}),"\n",(0,n.jsx)(t.h2,{id:"dataflow",children:"Dataflow"}),"\n",(0,n.jsx)(t.p,{children:"Dataflows are specified through the following format:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"nodes:\n    - id: foo\n      # ... (see below)\n    - id: bar\n      # ... (see below)\n"})}),"\n",(0,n.jsx)(t.h3,{id:"inputs-and-outputs",children:"Inputs and Outputs"}),"\n",(0,n.jsx)(t.p,{children:"Each operator or custom node has a separate namespace for its outputs. To refer to outputs, the <operator>/<output> syntax is used. This way, there are no name conflicts between operators."}),"\n",(0,n.jsx)(t.p,{children:"Input operands are specified using the <name>: <operator>/<output> syntax, where <data> is the internal name that should be used for the operand. The main advantage of this name mapping is that the same operator executable can be reused multiple times on different input."}),"\n",(0,n.jsx)(t.h2,{id:"nodes",children:"Nodes"}),"\n",(0,n.jsx)(t.p,{children:"Nodes are defined using the following format:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"nodes:\n  - id: some-unique-id\n    # For nodes with multiple operators\n    operators:\n      - id: operator-1\n        # ... (see below)\n      - id: operator-2\n        # ... (see below)\n\n\n\n  - id: some-unique-id-2\n    custom:\n      source: path/to/timestamp\n      env:\n        - ENVIRONMENT_VARIABLE_1: true\n      working-directory: some/path\n\n      inputs:\n        input_1: operator_2/output_4\n        input_2: custom_node_2/output_4\n      outputs:\n        - output_1\n \n  # Unique operator\n  - id: some-unique-id-3\n    operator:\n        # ... (see below)\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Nodes must provide either a ",(0,n.jsx)(t.code,{children:"operators"})," field, or a ",(0,n.jsx)(t.code,{children:"custom"})," field, but not both. Nodes with an ",(0,n.jsx)(t.code,{children:"operators"})," field run a dora runtime process, which runs and manages the specified operators. Nodes with a ",(0,n.jsx)(t.code,{children:"custom"})," field, run a custom executable."]}),"\n",(0,n.jsx)(t.h3,{id:"custom-nodes",children:"Custom Nodes"}),"\n",(0,n.jsxs)(t.p,{children:["Custom nodes specify the executable name and arguments like a normal shell operation through the ",(0,n.jsx)(t.code,{children:"run"})," field. Through the optional ",(0,n.jsx)(t.code,{children:"env"})," field, it is possible to set environment variables for the process. The optional ",(0,n.jsx)(t.code,{children:"working-directory"})," field allows to overwrite the directory in which the program is started."]}),"\n",(0,n.jsx)(t.p,{children:"To integrate with the rest of the dora dataflow, custom nodes must specify their inputs and outputs, similar to operators. They can reference outputs of both operators, and other custom nodes."}),"\n",(0,n.jsx)(t.h2,{id:"operators",children:"Operators"}),"\n",(0,n.jsx)(t.p,{children:"Operators are defined through the following format:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:'- id: unique-operator-id\n  name: Human-Readable Operator Name\n  description: An optional description of the operators\'s purpose.\n\n  inputs:\n    input_1: source_operator_2/output_1\n    input_2: custom_node_1/output_1\n  outputs:\n    - output_1\n\n  ## ONE OF:\n  shared_library: "path/to/shared_lib" # file extension and `lib` prefix are added automatically\n  python: "path/to/python_file.py"\n  wasm: "path/to/wasm_file.wasm"\n'})}),"\n",(0,n.jsx)(t.p,{children:"Operators must list all their inputs and outputs. Inputs can be linked to arbitrary outputs of other operators or custom nodes."}),"\n",(0,n.jsx)(t.p,{children:"There are multiple ways to implement an operator:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"as a C-compatible shared library"}),"\n",(0,n.jsx)(t.li,{children:"as a Python object"}),"\n",(0,n.jsx)(t.li,{children:"as a WebAssembly (WASM) module"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Each operator must specify exactly one implementation. The implementation must follow a specific format that is specified by dora."}),"\n",(0,n.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"nodes:\n  - id: rust-node\n    custom:\n      build: cargo build -p rust-dataflow-example-node\n      source: ../../target/debug/rust-dataflow-example-node\n      inputs:\n        tick: dora/timer/millis/10\n      outputs:\n        - random\n  - id: runtime-node\n    operators:\n      - id: rust-operator\n        build: cargo build -p rust-dataflow-example-operator\n        shared-library: ../../target/debug/rust_dataflow_example_operator\n        inputs:\n          tick: dora/timer/millis/100\n          random: rust-node/random\n        outputs:\n          - status\n  - id: rust-sink\n    custom:\n      build: cargo build -p rust-dataflow-example-sink\n      source: ../../target/debug/rust-dataflow-example-sink\n      inputs:\n        message: runtime-node/rust-operator/status\n"})}),"\n",(0,n.jsx)(t.h2,{id:"todo-integration-with-ros-12",children:"TODO: Integration with ROS 1/2"}),"\n",(0,n.jsxs)(t.p,{children:["To integrate dora-rs operators with ROS1 or ROS2 operators, we plan to provide special ",(0,n.jsx)(t.em,{children:"bridge operators"}),". These operators act as a sink in one dataflow framework and push all messages to a different dataflow framework, where they act as source."]}),"\n",(0,n.jsxs)(t.p,{children:["For example, we plan to provide a ",(0,n.jsx)(t.code,{children:"to_ros_2"})," operator, which takes a single ",(0,n.jsx)(t.code,{children:"data"})," input, which is then published to a specified ROS 2 dataflow."]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>s,x:()=>i});var n=o(6540);const a={},r=n.createContext(a);function s(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);