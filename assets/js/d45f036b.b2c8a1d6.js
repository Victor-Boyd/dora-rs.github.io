"use strict";(self.webpackChunkdora_rs_github_io=self.webpackChunkdora_rs_github_io||[]).push([[4653],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),u=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},s=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=u(a),m=r,k=d["".concat(p,".").concat(m)]||d[m]||c[m]||o;return a?n.createElement(k,l(l({ref:t},s),{},{components:a})):n.createElement(k,l({ref:t},s))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1024:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var n=a(7462),r=(a(7294),a(3905));const o={},l="Rust API",i={unversionedId:"api/rust-api",id:"api/rust-api",title:"Rust API",description:"Operator",source:"@site/docs/api/rust-api.md",sourceDirName:"api",slug:"/api/rust-api",permalink:"/docs/api/rust-api",draft:!1,editUrl:"https://github.com/dora-rs/dora-rs.github.io/edit/main/docs/api/rust-api.md",tags:[],version:"current",frontMatter:{}},p={},u=[{value:"Operator",id:"operator",level:2},{value:"Try it out!",id:"try-it-out",level:3},{value:"Custom Node",id:"custom-node",level:2},{value:"<code>DoraNode::init_from_env()</code>",id:"doranodeinit_from_env",level:4},{value:"<code>.recv()</code>",id:"recv",level:4},{value:"<code>.send_output(...)</code>",id:"send_output",level:4},{value:"Try it out!",id:"try-it-out-1",level:3}],s={toc:u},d="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"rust-api"},"Rust API"),(0,r.kt)("h2",{id:"operator"},"Operator"),(0,r.kt)("p",null,"The operator API is a framework for you to implement. The implemented operator will be managed by ",(0,r.kt)("inlineCode",{parentName:"p"},"dora"),". This framework enable us to make optimisation and provide advanced features. It is the recommended way of using ",(0,r.kt)("inlineCode",{parentName:"p"},"dora"),"."),(0,r.kt)("p",null,"An operator requires to be registered and implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"DoraOperator")," trait. It is composed of an ",(0,r.kt)("inlineCode",{parentName:"p"},"on_event")," method that defines the behaviour of the operator when there is an event such as receiving an input for example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"{{#include ../../examples/rust-dataflow/operator/src/lib.rs:0:17}}\n")),(0,r.kt)("h3",{id:"try-it-out"},"Try it out!"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Generate a new Rust library")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cargo new rust-dataflow-example-operator --lib\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Cargo.toml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},"{{#include ../../examples/rust-dataflow/operator/Cargo.toml}}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"src/lib.rs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"{{#include ../../examples/rust-dataflow/operator/src/lib.rs}}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Build it:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cargo build --release\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Link it in your graph as:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"{{#include ../../examples/rust-dataflow/dataflow.yml:13:21}}\n")),(0,r.kt)("p",null,"This example can be found in ",(0,r.kt)("inlineCode",{parentName:"p"},"examples"),"."),(0,r.kt)("h2",{id:"custom-node"},"Custom Node"),(0,r.kt)("p",null,"The custom node API allow you to integrate ",(0,r.kt)("inlineCode",{parentName:"p"},"dora")," into your application. It allows you to retrieve input and send output in any fashion you want. "),(0,r.kt)("h4",{id:"doranodeinit_from_env"},(0,r.kt)("inlineCode",{parentName:"h4"},"DoraNode::init_from_env()")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DoraNode::init_from_env()")," initiate a node from environment variables set by ",(0,r.kt)("inlineCode",{parentName:"p"},"dora-coordinator")," "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let (mut node, mut events) = DoraNode::init_from_env()?;\n")),(0,r.kt)("h4",{id:"recv"},(0,r.kt)("inlineCode",{parentName:"h4"},".recv()")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},".recv()")," wait for the next event on the events stream."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let event = events.recv();\n")),(0,r.kt)("h4",{id:"send_output"},(0,r.kt)("inlineCode",{parentName:"h4"},".send_output(...)")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"send_output")," send data from the node to the other nodes.\nWe take a closure as an input to enable zero copy on send."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"node.send_output(\n    &data_id, \n    metadata.parameters,\n    data.len(),\n    |out| {\n        out.copy_from_slice(data);\n    })?;\n")),(0,r.kt)("h3",{id:"try-it-out-1"},"Try it out!"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Generate a new Rust binary (application):")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cargo new rust-dataflow-example-node\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},"{{#include ../../examples/rust-dataflow/node/Cargo.toml}}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"src/main.rs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"{{#include ../../examples/rust-dataflow/node/src/main.rs}}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Link it in your graph as:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"{{#include ../../examples/rust-dataflow/dataflow.yml:6:12}}\n")))}c.isMDXComponent=!0}}]);