"use strict";(self.webpackChunkdora_rs_github_io=self.webpackChunkdora_rs_github_io||[]).push([[46],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(r),d=a,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1792:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const i={},o="Middleware layer abstraction(MLA)",l={unversionedId:"references/communication-layer",id:"references/communication-layer",title:"Middleware layer abstraction(MLA)",description:"Discussion: Middleware (communication) layer abstraction (MLA)",source:"@site/docs/references/communication-layer.md",sourceDirName:"references",slug:"/references/communication-layer",permalink:"/docs/references/communication-layer",draft:!1,editUrl:"https://github.com/dora-rs/dora-rs.github.io/edit/main/docs/references/communication-layer.md",tags:[],version:"current",frontMatter:{},sidebar:"references",previous:{title:"Reference",permalink:"/docs/references/"},next:{title:"Framework",permalink:"/docs/references/library-vs-framework"}},s={},c=[],p={toc:c},u="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"middleware-layer-abstractionmla"},"Middleware layer abstraction(MLA)"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Discussion: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/dora-rs/dora/discussions/53"},"Middleware (communication) layer abstraction (MLA)"))),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"dora")," needs to implement MLA as a separate crate to provides a middleware abstraction layer that enables scalable, high performance communications for inter async tasks, intra-process (OS threads), interprocess communication on a single computer node or between different nodes in a computer network. MLA needs to support different communication patterns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"publish-subscribe push / push pattern - the published message is pushed to subscribers"),(0,a.kt)("li",{parentName:"ul"},"publish-subscribe push / pull pattern - the published message is write to storage and later pulled by subscribers"),(0,a.kt)("li",{parentName:"ul"},"Request / reply pattern"),(0,a.kt)("li",{parentName:"ul"},"Point-to-point pattern"),(0,a.kt)("li",{parentName:"ul"},"Client / Server pattern")),(0,a.kt)("p",null,"The MLA needs to abstract following details: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"inter-async tasks (e.g., tokio channels), intraprocess (OS threads, e.g., shared memory), interprocess and inter-host / inter-network communication"),(0,a.kt)("li",{parentName:"ul"},"different transport layer implementations (shared memory, UDP, TCP)"),(0,a.kt)("li",{parentName:"ul"},"builtin support for multiple serialization / deserialization protocols, e.g, capnproto, protobuf, flatbuffers etc"),(0,a.kt)("li",{parentName:"ul"},"different language bindings to Rust, Python, C, C++ etc"),(0,a.kt)("li",{parentName:"ul"},"telemetry tools for logs, metrics, distributed tracing, live data monitoring (e.g., tap a live data), recording and replay")),(0,a.kt)("p",null,"Rust eco-system has abundant crates to provide underlaying communications, e.g.,:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"tokio / crossbeam provides different types of channels serving different purpose: mpsc, oneshot, broadcast, watch etc"),(0,a.kt)("li",{parentName:"ul"},"Tonic provides gRPC services"),(0,a.kt)("li",{parentName:"ul"},"Tower provides request/reply service"),(0,a.kt)("li",{parentName:"ul"},"Zenoh middleware provides many different pub/sub capabilities")),(0,a.kt)("p",null,"MLA also needs to provide high level APIs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"publish(topic, value, optional fields):- optional fields may contain senders' identify to help MLA logics to satify above requirements"),(0,a.kt)("li",{parentName:"ul"},"subscriber(topic, optional fields)-> future streams"),(0,a.kt)("li",{parentName:"ul"},"put(key, value, optional fields)"),(0,a.kt)("li",{parentName:"ul"},"get(key, optional fields) -> value"),(0,a.kt)("li",{parentName:"ul"},"send(key, msg, optional fields)"),(0,a.kt)("li",{parentName:"ul"},"recv(key, optional fields)->value")),(0,a.kt)("p",null,"More info here: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/dora-rs/dora/discussions/53"},"#53")))}m.isMDXComponent=!0}}]);