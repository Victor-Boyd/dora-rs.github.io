"use strict";(self.webpackChunkdora_rs_github_io=self.webpackChunkdora_rs_github_io||[]).push([[498],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>y});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function p(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var l=r.createContext({}),s=function(e){var t=r.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):p(p({},t),e)),o},c=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(o),m=n,y=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return o?r.createElement(y,p(p({ref:t},c),{},{components:o})):r.createElement(y,p({ref:t},c))}));function y(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,p=new Array(a);p[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:n,p[1]=i;for(var s=2;s<a;s++)p[s]=o[s];return r.createElement.apply(null,p)}return r.createElement.apply(null,o)}m.displayName="MDXCreateElement"},8302:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=o(7462),n=(o(7294),o(3905));const a={},p="Yolop operator",i={unversionedId:"nodes_operators/yolop_operator",id:"nodes_operators/yolop_operator",title:"Yolop operator",description:"Yolop object detection operator detects drivable areas and lanes on an image.",source:"@site/docs/nodes_operators/yolop_operator.md",sourceDirName:"nodes_operators",slug:"/nodes_operators/yolop_operator",permalink:"/zh-CN/docs/nodes_operators/yolop_operator",draft:!1,editUrl:"https://crowdin.com/dora-rs/zh-CN",tags:[],version:"current",frontMatter:{},sidebar:"nodes_operators",previous:{title:"Webcam operator",permalink:"/zh-CN/docs/nodes_operators/webcam_operator"},next:{title:"Yolov5 operator",permalink:"/zh-CN/docs/nodes_operators/yolov5_operator"}},l={},s=[{value:"Inputs",id:"inputs",level:2},{value:"Outputs",id:"outputs",level:2},{value:"Graph Description",id:"graph-description",level:2},{value:"Graph visualisation",id:"graph-visualisation",level:2}],c={toc:s},u="wrapper";function d(e){let{components:t,...o}=e;return(0,n.kt)(u,(0,r.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"yolop-operator"},"Yolop operator"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"Yolop")," object detection operator detects drivable areas and lanes on an image."),(0,n.kt)("p",null,"More info here: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/ultralytics/yolop"},"https://github.com/ultralytics/yolop")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"Yolop")," has not been finetuned on the simulation and is directly importing weight from Pytorch Hub."),(0,n.kt)("p",null,"The image size must be specified in order to work. By default it is 1920x1080xBGR."),(0,n.kt)("h2",{id:"inputs"},"Inputs"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"image as 1920x1080xBGR array.")),(0,n.kt)("h2",{id:"outputs"},"Outputs"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Bounding box coordinates as well as the confidence and class label as output.")),(0,n.kt)("h2",{id:"graph-description"},"Graph Description"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"  - id: yolop\n    operator: \n      outputs:\n        - bbox\n      inputs:\n        image: agent/image\n      python: ../../operators/yolop_op.py\n    env:\n      PYTORCH_DEVICE: cuda\n")),(0,n.kt)("h2",{id:"graph-visualisation"},"Graph visualisation"),(0,n.kt)("div",{align:"center"},(0,n.kt)("mermaid",{value:"flowchart TB\n  agent\nsubgraph yolop\n  yolop/op[op]\nend\nsubgraph obstacle_location_op\n  obstacle_location_op/op[op]\nend\n  agent -- image --\x3e yolop/op\n  yolop/op -- lanes --\x3e obstacle_location_op/op\n  yolop/op -- drivable_area --\x3e obstacle_location_op/op"})))}d.isMDXComponent=!0}}]);