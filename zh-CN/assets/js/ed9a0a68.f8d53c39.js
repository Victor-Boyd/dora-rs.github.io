"use strict";(self.webpackChunkdora_rs_github_io=self.webpackChunkdora_rs_github_io||[]).push([[33],{3905:(n,e,t)=>{t.d(e,{Zo:()=>_,kt:()=>f});var a=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function s(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function r(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?s(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function p(n,e){if(null==n)return{};var t,a,o=function(n,e){if(null==n)return{};var t,a,o={},s=Object.keys(n);for(a=0;a<s.length;a++)t=s[a],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);for(a=0;a<s.length;a++)t=s[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var l=a.createContext({}),i=function(n){var e=a.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):r(r({},e),n)),t},_=function(n){var e=i(n.components);return a.createElement(l.Provider,{value:e},n.children)},u="mdxType",c={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(n,e){var t=n.components,o=n.mdxType,s=n.originalType,l=n.parentName,_=p(n,["components","mdxType","originalType","parentName"]),u=i(t),d=o,f=u["".concat(l,".").concat(d)]||u[d]||c[d]||s;return t?a.createElement(f,r(r({ref:e},_),{},{components:t})):a.createElement(f,r({ref:e},_))}));function f(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var s=t.length,r=new Array(s);r[0]=d;var p={};for(var l in e)hasOwnProperty.call(e,l)&&(p[l]=e[l]);p.originalType=n,p[u]="string"==typeof n?n:o,r[1]=p;for(var i=2;i<s;i++)r[i]=t[i];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5626:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>p,toc:()=>i});var a=t(7462),o=(t(7294),t(3905));const s={},r="FOT( Frenet Optimal Planner, Frenet \u6700\u4f18\u89c4\u5212\u5e08) \u64cd\u4f5c\u7b26",p={unversionedId:"nodes_operators/fot_op",id:"nodes_operators/fot_op",title:"FOT( Frenet Optimal Planner, Frenet \u6700\u4f18\u89c4\u5212\u5e08) \u64cd\u4f5c\u7b26",description:"FOT( Frenet Optimal Planner, Frenet \u6700\u4f18\u89c4\u5212\u5e08) \u64cd\u4f5c\u7b26\uff0c\u57fa\u4e8e https://github.com/erdos-project/frenetoptimaltrajectoryplanner/ \u5e76\u5305\u88c5\u4e0d\u540c\u7684\u5143\u7d20\u969c\u788d\u7269\u3001\u4f4d\u7f6e\u3001\u901f\u5ea6 ...\u8f6c\u6362\u4e3a Frenet \u6d88\u8d39\u683c\u5f0f\u3002",source:"@site/i18n/zh-CN/docusaurus-plugin-content-docs/current/nodes_operators/fot_op.md",sourceDirName:"nodes_operators",slug:"/nodes_operators/fot_op",permalink:"/zh-CN/docs/nodes_operators/fot_op",draft:!1,editUrl:"https://crowdin.com/dora-rs/zh-CN",tags:[],version:"current",frontMatter:{},sidebar:"nodes_operators",previous:{title:"\u641c\u7d22",permalink:"/zh-CN/docs/nodes_operators/search"},next:{title:"MiDaS (Mixed Frequency Data Sampling Regression Models, \u6df7\u9891\u6570\u636e\u91c7\u6837\u56de\u5f52\u6a21\u578b)",permalink:"/zh-CN/docs/nodes_operators/midas_op"}},l={},i=[{value:"\u8f93\u5165",id:"\u8f93\u5165",level:2},{value:"\u8f93\u51fa",id:"\u8f93\u51fa",level:2},{value:"\u793a\u4f8b\u56fe\u50cf",id:"\u793a\u4f8b\u56fe\u50cf",level:2},{value:"\u56fe\u63cf\u8ff0",id:"\u56fe\u63cf\u8ff0",level:2},{value:"\u56fe\u53ef\u89c6\u5316",id:"\u56fe\u53ef\u89c6\u5316",level:2},{value:"\u65b9\u6cd5",id:"\u65b9\u6cd5",level:2},{value:"<code>__init__()</code>",id:"__init__",level:3},{value:"<code>.on_event(...)</code>",id:"on_event",level:3},{value:"<code>.on_input(...)</code>",id:"on_input",level:3}],_={toc:i},u="wrapper";function c(n){let{components:e,...t}=n;return(0,o.kt)(u,(0,a.Z)({},_,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"fot-frenet-optimal-planner-frenet-\u6700\u4f18\u89c4\u5212\u5e08-\u64cd\u4f5c\u7b26"},"FOT( Frenet Optimal Planner, Frenet \u6700\u4f18\u89c4\u5212\u5e08) \u64cd\u4f5c\u7b26"),(0,o.kt)("p",null,"FOT( Frenet Optimal Planner, Frenet \u6700\u4f18\u89c4\u5212\u5e08) \u64cd\u4f5c\u7b26\uff0c\u57fa\u4e8e ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/erdos-project/frenet_optimal_trajectory_planner/"},"https://github.com/erdos-project/frenet_optimal_trajectory_planner/")," \u5e76\u5305\u88c5\u4e0d\u540c\u7684\u5143\u7d20",(0,o.kt)("inlineCode",{parentName:"p"},"\u969c\u788d\u7269"),"\u3001",(0,o.kt)("inlineCode",{parentName:"p"},"\u4f4d\u7f6e"),"\u3001",(0,o.kt)("inlineCode",{parentName:"p"},"\u901f\u5ea6")," ...\u8f6c\u6362\u4e3a Frenet \u6d88\u8d39\u683c\u5f0f\u3002"),(0,o.kt)("p",null,"FOT \u8f93\u5165\u4e3a\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'initial_conditions = {\n    "ps": 0,\n    "target_speed": # \u76ee\u6807\u901f\u5ea6\n    "pos": # x, y \u5f53\u524d\u4f4d\u7f6e\n    "vel": #  vx, vy \u5f53\u524d\u901f\u5ea6\n    "wp": # [[x, y], ... n_waypoints ] \u6240\u9700\u822a\u70b9\n    "obs": # [[min_x, min_y, max_x, max_y], ... ] \u8def\u4e0a\u969c\u788d\n}\n')),(0,o.kt)("p",null,"\u4e0b\u9762\u8fd8\u6709\u4e00\u7ec4\u8d85\u53c2\u6570\u3002"),(0,o.kt)("p",null,"\u7531\u4e8e\u6211\u4eec\u7684\u969c\u788d\u7269\u88ab\u5b9a\u4e49\u4e3a 3D \u70b9\uff0c\u6211\u4eec\u9700\u8981\u5c06\u8fd9\u4e9b\u70b9\u8f6c\u6362\u4e3a ",(0,o.kt)("inlineCode",{parentName:"p"},"[min_x\uff0c min_y\uff0c max_x\uff0c max_y]")," \u683c\u5f0f\u3002 \u6211\u4eec\u5728 ",(0,o.kt)("inlineCode",{parentName:"p"},"get_obstacle_list")," \u51fd\u6570\u4e2d\u6267\u884c\u6b64\u64cd\u4f5c\u3002 \u8fd9\u79cd\u8fd1\u4f3c\u503c\u975e\u5e38\u57fa\u672c\uff0c\u53ef\u80fd\u9700\u8981\u91cd\u65b0\u5ba1\u89c6\u3002"),(0,o.kt)("p",null,"\u8f93\u51fa\u8981\u4e48\u662f\u6210\u529f\u7684\u8f68\u8ff9\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u8f93\u5165\u5230 PID \u4e2d\u3002 \u6216\u8005\u5b83\u662f\u5931\u8d25\u7684\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u5f53\u524d\u4f4d\u7f6e\u4f5c\u4e3a\u822a\u70b9\u53d1\u9001\u3002"),(0,o.kt)("h2",{id:"\u8f93\u5165"},"\u8f93\u5165"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u56fe\u50cf: \u9ad8 x \u5bbd x BGR array\u3002")),(0,o.kt)("h2",{id:"\u8f93\u51fa"},"\u8f93\u51fa"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u822a\u70b9\uff1ax_points, y_points, \u901f\u5ea6")),(0,o.kt)("h2",{id:"\u793a\u4f8b\u56fe\u50cf"},"\u793a\u4f8b\u56fe\u50cf"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://i.imgur.com/9AGDlQY.gif",alt:"Imgur"})),(0,o.kt)("h2",{id:"\u56fe\u63cf\u8ff0"},"\u56fe\u63cf\u8ff0"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"  - id: fot_op\n    operator:\n      python: ../../operators/fot_op.py\n      outputs:\n        - waypoints\n      inputs:\n        position: oasis_agent/position\n        speed: oasis_agent/speed\n        obstacles: obstacle_location_op/obstacles\n        gps_waypoints: carla_gps_op/gps_waypoints\n")),(0,o.kt)("h2",{id:"\u56fe\u53ef\u89c6\u5316"},"\u56fe\u53ef\u89c6\u5316"),(0,o.kt)("mermaid",{value:"        flowchart TB\n  oasis_agent\nsubgraph carla_gps_op\n  carla_gps_op/op[op]\nend\nsubgraph fot_op\n  fot_op/op[op]\nend\nsubgraph obstacle_location_op\n  obstacle_location_op/op[op]\nend\nsubgraph pid_control_op\n  pid_control_op/op[op]\nend\n  carla_gps_op/op -- gps_waypoints --\x3e fot_op/op\n  obstacle_location_op/op -- obstacles --\x3e fot_op/op\n  oasis_agent -- position --\x3e fot_op/op\n  oasis_agent -- speed --\x3e fot_op/op\n  fot_op/op -- waypoints --\x3e pid_control_op/op"}),(0,o.kt)("h2",{id:"\u65b9\u6cd5"},"\u65b9\u6cd5"),(0,o.kt)("h3",{id:"__init__"},(0,o.kt)("inlineCode",{parentName:"h3"},"__init__()")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"\u6e90\u7801"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'    def __init__(self):\n        self.obstacles = np.array([])\n        self.lanes = np.array([])\n        self.position = []\n        self.speed = []\n        self.last_position = []\n        self.waypoints = []\n        self.gps_waypoints = np.array([])\n        self.last_obstacles = np.array([])\n        self.obstacle_metadata = {}\n        self.gps_metadata = {}\n        self.metadata = {}\n        self.orientation = None\n        self.outputs = []\n        self.hyperparameters = {\n            "max_speed": 25.0,\n            "max_accel": 45.0,\n            "max_curvature": 55.0,\n            "max_road_width_l": 0.1,\n            "max_road_width_r": 0.1,\n            "d_road_w": 0.5,\n            "dt": 0.5,\n            "maxt": 5.0,\n            "mint": 2.0,\n            "d_t_s": 5,\n            "n_s_sample": 2.0,\n            "obstacle_clearance": 0.1,\n            "kd": 1.0,\n            "kv": 0.1,\n            "ka": 0.1,\n            "kj": 0.1,\n            "kt": 0.1,\n            "ko": 0.1,\n            "klat": 1.0,\n            "klon": 1.0,\n            "num_threads": 0,  # \u8bbe\u7f6e 0 \u4ee5\u907f\u514d\u4f7f\u7528\u7ebf\u7a0b\u7b97\u6cd5\n        }\n        self.conds = {\n            "s0": 0,\n            "target_speed": TARGET_SPEED,\n        }  # \u7c98\u8d34\u8c03\u8bd5\u65e5\u5fd7\u7684\u8f93\u51fa\n\n\n'))),(0,o.kt)("h3",{id:"on_event"},(0,o.kt)("inlineCode",{parentName:"h3"},".on_event(...)")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"\u6e90\u7801"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\n    def on_event(\n        self,\n        dora_event: dict,\n        send_output: Callable[[str, bytes], None],\n    ) -> DoraStatus:\n        if dora_event["type"] == "INPUT":\n            return self.on_input(dora_event, send_output)\n        return DoraStatus.CONTINUE\n\n\n'))),(0,o.kt)("h3",{id:"on_input"},(0,o.kt)("inlineCode",{parentName:"h3"},".on_input(...)")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"\u6e90\u7801"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\n    def on_input(\n        self,\n        dora_input: dict,\n        send_output: Callable[[str, bytes], None],\n    ):\n        if dora_input["id"] == "position":\n            self.last_position = self.position\n            self.position = np.array(dora_input["value"])\n            if len(self.last_position) == 0:\n                self.last_position = self.position\n            return DoraStatus.CONTINUE\n\n        elif dora_input["id"] == "speed":\n            self.speed = np.array(dora_input["value"])\n            return DoraStatus.CONTINUE\n\n        elif dora_input["id"] == "obstacles":\n            obstacles = np.array(dora_input["value"]).reshape((-1, 5))\n            if len(self.last_obstacles) > 0:\n                self.obstacles = np.concatenate([self.last_obstacles, obstacles])\n            else:\n                self.obstacles = obstacles\n\n        elif dora_input["id"] == "global_lanes":\n            lanes = np.array(dora_input["value"]).reshape((-1, 60, 3))\n            self.lanes = lanes\n            return DoraStatus.CONTINUE\n\n        elif "gps_waypoints" == dora_input["id"]:\n            waypoints = np.array(dora_input["value"])\n            waypoints = waypoints.reshape((-1, 3))[:, :2]\n            self.gps_waypoints = waypoints\n            return DoraStatus.CONTINUE\n\n        if len(self.gps_waypoints) == 0:\n            print("No waypoints")\n            send_output(\n                "waypoints",\n                self.gps_waypoints.tobytes(),\n                dora_input["metadata"],\n            )\n            return DoraStatus.CONTINUE\n\n        elif len(self.position) == 0 or len(self.speed) == 0:\n            return DoraStatus.CONTINUE\n\n        [x, y, z, rx, ry, rz, rw] = self.position\n        [_, _, yaw] = R.from_quat([rx, ry, rz, rw]).as_euler("xyz", degrees=False)\n\n        gps_obstacles = get_obstacle_list(\n            self.position, self.obstacles, self.gps_waypoints\n        )\n\n        if len(self.lanes) > 0:\n            lanes = get_lane_list(self.position, self.lanes, self.gps_waypoints)\n            obstacles = np.concatenate([gps_obstacles, lanes])\n        else:\n            obstacles = gps_obstacles\n        initial_conditions = {\n            "ps": 0,\n            "target_speed": self.conds["target_speed"],\n            "pos": self.position[:2],\n            "vel": (np.clip(LA.norm(self.speed), 0.5, 40))\n            * np.array([np.cos(yaw), np.sin(yaw)]),\n            "wp": self.gps_waypoints,\n            "obs": obstacles,\n        }\n\n        (\n            result_x,\n            result_y,\n            speeds,\n            ix,\n            iy,\n            iyaw,\n            d,\n            s,\n            speeds_x,\n            speeds_y,\n            misc,\n            costs,\n            success,\n        ) = fot_wrapper.run_fot(initial_conditions, self.hyperparameters)\n\n        if not success:\n            initial_conditions["wp"] = initial_conditions["wp"][:5]\n            print(f"fot failed. stopping with {initial_conditions}.")\n            target_distance = LA.norm(self.gps_waypoints[-1] - self.position[:2])\n            print(f"Distance to target: {target_distance}")\n            for obstacle in self.obstacles:\n                print(f"obstacles:{obstacle}, label: {LABELS[int(obstacle[-1])]}")\n\n            send_output(\n                "waypoints",\n                pa.array(np.array([x, y, 0.0], np.float32)),\n                dora_input["metadata"],\n            )\n            return DoraStatus.CONTINUE\n\n        self.waypoints = np.concatenate([result_x, result_y]).reshape((2, -1)).T\n\n        self.outputs = np.ascontiguousarray(\n            np.concatenate([result_x, result_y, speeds])\n            .reshape((3, -1))\n            .T.astype(np.float32)\n        )\n        send_output(\n            "waypoints",\n            pa.array(self.outputs.ravel()),\n            dora_input["metadata"],\n        )\n        return DoraStatus.CONTINUE\n\n\n'))))}c.isMDXComponent=!0}}]);