"use strict";(self.webpackChunkdora_rs_github_io=self.webpackChunkdora_rs_github_io||[]).push([[8729],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",_={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(t),c=o,f=u["".concat(p,".").concat(c)]||u[c]||_[c]||a;return t?r.createElement(f,i(i({ref:n},d),{},{components:t})):r.createElement(f,i({ref:n},d))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=c;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},6654:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>_,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=t(7462),o=(t(7294),t(3905));const a={},i="PID Control (PID:\u504f\u5dee\u7684\u6bd4\u4f8bP-\u79ef\u5206I-\u5fae\u5206D  \u63a7\u5236) \u64cd\u4f5c\u7b26",l={unversionedId:"nodes_operators/pid_control_op",id:"nodes_operators/pid_control_op",title:"PID Control (PID:\u504f\u5dee\u7684\u6bd4\u4f8bP-\u79ef\u5206I-\u5fae\u5206D  \u63a7\u5236) \u64cd\u4f5c\u7b26",description:"PID Control (PID:\u504f\u5dee\u7684\u6bd4\u4f8bP-\u79ef\u5206I-\u5fae\u5206D  \u63a7\u5236) \u64cd\u4f5c\u7b26\u8ba1\u7b97\u9700\u8981\u6267\u884c\u7684\u547d\u4ee4\u4ee5\u8ddf\u968f\u7ed9\u5b9a\u7684\u822a\u70b9\u3002 \u5b83\u4ee5\u52a0\u901f\u7684\u65b9\u5f0f\u5bf9\u6c7d\u8f66\u5f53\u524d\u901f\u5ea6\u548c\u4f4d\u7f6e\u505a\u51fa\u53cd\u5e94\uff0c\u6216\u6839\u636e\u5148\u524d\u7684\u8f93\u5165\u8fdb\u884c\u5239\u8f66\u3002",source:"@site/i18n/zh-CN/docusaurus-plugin-content-docs/current/nodes_operators/pid_control_op.md",sourceDirName:"nodes_operators",slug:"/nodes_operators/pid_control_op",permalink:"/zh-CN/docs/nodes_operators/pid_control_op",draft:!1,editUrl:"https://crowdin.com/dora-rs/zh-CN",tags:[],version:"current",frontMatter:{},sidebar:"nodes_operators",previous:{title:"Obstacle location (\u969c\u788d\u7269\u4f4d\u7f6e) \u64cd\u4f5c\u7b26",permalink:"/zh-CN/docs/nodes_operators/obstacle_location_op"},next:{title:"Plot(\u7ed8\u5236) \u64cd\u4f5c\u7b26",permalink:"/zh-CN/docs/nodes_operators/plot"}},p={},s=[{value:"\u8f93\u5165",id:"\u8f93\u5165",level:2},{value:"\u8f93\u51fa",id:"\u8f93\u51fa",level:2},{value:"\u56fe\u63cf\u8ff0",id:"\u56fe\u63cf\u8ff0",level:2},{value:"\u56fe\u53ef\u89c6\u5316",id:"\u56fe\u53ef\u89c6\u5316",level:2},{value:"\u8003\u8651\u4fee\u6539\u8d85\u53c2\u6570",id:"\u8003\u8651\u4fee\u6539\u8d85\u53c2\u6570",level:2},{value:"\u65b9\u6cd5",id:"\u65b9\u6cd5",level:2},{value:"<code>__init__()</code>",id:"__init__",level:3},{value:"<code>.on_event(...)</code>",id:"on_event",level:3},{value:"<code>.on_input(...)</code>",id:"on_input",level:3}],d={toc:s},u="wrapper";function _(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"pid-control-pid\u504f\u5dee\u7684\u6bd4\u4f8bp-\u79ef\u5206i-\u5fae\u5206d--\u63a7\u5236-\u64cd\u4f5c\u7b26"},"PID Control (PID:\u504f\u5dee\u7684\u6bd4\u4f8bP-\u79ef\u5206I-\u5fae\u5206D  \u63a7\u5236) \u64cd\u4f5c\u7b26"),(0,o.kt)("p",null,"PID Control (PID:\u504f\u5dee\u7684\u6bd4\u4f8bP-\u79ef\u5206I-\u5fae\u5206D  \u63a7\u5236) \u64cd\u4f5c\u7b26\u8ba1\u7b97\u9700\u8981\u6267\u884c\u7684\u547d\u4ee4\u4ee5\u8ddf\u968f\u7ed9\u5b9a\u7684\u822a\u70b9\u3002 \u5b83\u4ee5\u52a0\u901f\u7684\u65b9\u5f0f\u5bf9\u6c7d\u8f66\u5f53\u524d\u901f\u5ea6\u548c\u4f4d\u7f6e\u505a\u51fa\u53cd\u5e94\uff0c\u6216\u6839\u636e\u5148\u524d\u7684\u8f93\u5165\u8fdb\u884c\u5239\u8f66\u3002"),(0,o.kt)("h2",{id:"\u8f93\u5165"},"\u8f93\u5165"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u8981\u8ddf\u968f\u7684\u822a\u70b9\u5750\u6807\u3002")),(0,o.kt)("h2",{id:"\u8f93\u51fa"},"\u8f93\u51fa"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u6cb9\u95e8\u3001\u8f6c\u5411 \uff08RAD\uff09 \u548c\u5239\u8f66\u3002")),(0,o.kt)("h2",{id:"\u56fe\u63cf\u8ff0"},"\u56fe\u63cf\u8ff0"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"  - id: pid_control_op\n    operator:\n      python: ../../operators/pid_control_op.py\n      outputs:\n        - control\n      inputs:\n        position: oasis_agent/position\n        speed: oasis_agent/speed\n        waypoints: fot_op/waypoints\n")),(0,o.kt)("h2",{id:"\u56fe\u53ef\u89c6\u5316"},"\u56fe\u53ef\u89c6\u5316"),(0,o.kt)("mermaid",{value:"        flowchart TB\n  oasis_agent\nsubgraph fot_op\n  fot_op/op[op]\nend\nsubgraph pid_control_op\n  pid_control_op/op[op]\nend\n  oasis_agent -- position --\x3e pid_control_op/op\n  oasis_agent -- speed --\x3e pid_control_op/op\n  fot_op/op -- waypoints --\x3e pid_control_op/op\n  pid_control_op/op -- control --\x3e oasis_agent"}),(0,o.kt)("h2",{id:"\u8003\u8651\u4fee\u6539\u8d85\u53c2\u6570"},"\u8003\u8651\u4fee\u6539\u8d85\u53c2\u6570"),(0,o.kt)("p",null,"\u89c1\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/PID_controller"},"https://en.wikipedia.org/wiki/PID_controller")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"pid_p = 0.1\npid_d = 0.0\npid_i = 0.05\ndt = 1.0 / 20   \n")),(0,o.kt)("h2",{id:"\u65b9\u6cd5"},"\u65b9\u6cd5"),(0,o.kt)("h3",{id:"__init__"},(0,o.kt)("inlineCode",{parentName:"h3"},"__init__()")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"\u6e90\u7801"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"    def __init__(self):\n        self.waypoints = []\n        self.target_speeds = []\n        self.metadata = {}\n        self.position = []\n        self.speed = []\n        self.previous_position = []\n        self.current_speed = []\n        self.previous_time = time.time()\n\n\n"))),(0,o.kt)("h3",{id:"on_event"},(0,o.kt)("inlineCode",{parentName:"h3"},".on_event(...)")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"\u6e90\u7801"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\n    def on_event(\n        self,\n        dora_event: dict,\n        send_output: Callable[[str, bytes], None],\n    ) -> DoraStatus:\n        if dora_event["type"] == "INPUT":\n            return self.on_input(dora_event, send_output)\n        return DoraStatus.CONTINUE\n\n\n'))),(0,o.kt)("h3",{id:"on_input"},(0,o.kt)("inlineCode",{parentName:"h3"},".on_input(...)")),(0,o.kt)("p",null,"\u8f93\u5165\u53e5\u67c4\u3002 \u53c2\u6570: dora_input","[",'"id"',"]","  (str): yaml \u914d\u7f6e\u4e2d\u58f0\u660e\u7684\u8f93\u5165\u7684 Id dora_input","[",'"value"',"]"," (arrow.array(UInt8)): \u5b57\u8282\u5f62\u5f0f\u7684\u8f93\u5165\u6d88\u606f send_output (Callable[","[str, bytes]","]): \u51fd\u6570\u4f7f\u8f93\u51fa\u53d1\u9001\u56dedora\u3002"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"\u6e90\u7801"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\n    def on_input(\n        self,\n        dora_input: dict,\n        send_output: Callable[[str, bytes], None],\n    ):\n        """\u8f93\u5165\u53e5\u67c4\u3002\n        \u53c2\u6570:\n            dora_input["id"]  (str): yaml \u914d\u7f6e\u4e2d\u58f0\u660e\u7684\u8f93\u5165\u7684 Id\n            dora_input["value"] (arrow.array(UInt8)): \u5b57\u8282\u5f62\u5f0f\u7684\u8f93\u5165\u6d88\u606f\n            send_output (Callable[[str, bytes]]): \u51fd\u6570\u4f7f\u8f93\u51fa\u53d1\u9001\u56dedora\u3002\n        """\n\n        if "position" == dora_input["id"]:\n            self.position = dora_input["value"].to_numpy()\n            return DoraStatus.CONTINUE\n\n        elif dora_input["id"] == "speed":\n            self.speed = np.array(dora_input["value"])\n            return DoraStatus.CONTINUE\n\n        elif "waypoints" == dora_input["id"]:\n            waypoints = dora_input["value"].to_numpy()\n            waypoints = waypoints.reshape((-1, 3))\n\n            self.target_speeds = waypoints[:, 2]\n            self.waypoints = waypoints[:, :2]\n            self.metadata = dora_input["metadata"]\n\n        if len(self.position) == 0 or len(self.speed) == 0:\n            return DoraStatus.CONTINUE\n\n        if len(self.waypoints) == 0:\n            send_output(\n                "control",\n                pa.array(np.array([0, 0, 1], np.float16).ravel()),\n                self.metadata,\n            )\n            return DoraStatus.CONTINUE\n\n        [x, y, _, rx, ry, rz, rw] = self.position\n        [_, _, yaw] = R.from_quat([rx, ry, rz, rw]).as_euler("xyz", degrees=False)\n        distances = pairwise_distances(self.waypoints, np.array([[x, y]])).T[0]\n\n        index = distances > MIN_PID_WAYPOINT_DISTANCE\n        self.waypoints = self.waypoints[index]\n        self.target_speeds = self.target_speeds[index]\n        distances = distances[index]\n\n        if len(self.waypoints) == 0:\n            target_angle = 0\n            target_speed = 0\n        else:\n            argmin_distance = np.argmin(distances)\n\n            ## \u68c0\u7d22\u79bb\u8f6c\u5411\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9\n            target_location = self.waypoints[argmin_distance]\n\n            target_speed = self.target_speeds[argmin_distance]\n\n            ## \u8ba1\u7b97\u8f6c\u5411\u89d2\u5ea6\n            target_vector = target_location - [x, y]\n\n            target_angle = get_angle(\n                math.atan2(target_vector[1], target_vector[0]), yaw\n            )\n\n        throttle, brake = compute_throttle_and_brake(\n            pid, LA.norm(self.speed), target_speed\n        )\n\n        send_output(\n            "control",\n            pa.array(np.array([throttle, target_angle, brake], np.float16)),\n            self.metadata,\n        )\n        return DoraStatus.CONTINUE\n\n\n'))))}_.isMDXComponent=!0}}]);