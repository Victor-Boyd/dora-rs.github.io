"use strict";(self.webpackChunkdora_rs_github_io=self.webpackChunkdora_rs_github_io||[]).push([[8257],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},_=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=d(n),_=o,m=u["".concat(l,".").concat(_)]||u[_]||p[_]||s;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,i=new Array(s);i[0]=_;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[u]="string"==typeof e?e:o,i[1]=a;for(var d=2;d<s;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}_.displayName="MDXCreateElement"},7192:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var r=n(7462),o=(n(7294),n(3905));const s={},i="\u6865\u63a5 ROS2",a={unversionedId:"guides/dora-ros2-bridges/dora-ros2-bridges",id:"guides/dora-ros2-bridges/dora-ros2-bridges",title:"\u6865\u63a5 ROS2",description:"dora-ros2-bridge \u662f\u6211\u4eec\u4e3a\u4eba\u4eec\u8f7b\u677e\u4f7f\u7528 ROS2 \u6784\u5efa\u7684\u6269\u5c55\u3002 ROS2 \u7684\u4e3b\u8981\u95ee\u9898\u4e4b\u4e00\u662f\u590d\u6742\u7684\u6784\u5efa\u7cfb\u7edf\u3002 \u4eba\u4eec\u5f88\u96be\u5728 ros2 \u6784\u5efa\u7cfb\u7edf\u4e4b\u4e0a\u4f7f\u7528 dora\uff0c\u56e0\u6b64\u6211\u4eec\u6784\u5efa\u4e86\u8fd9\u4e2a\u6865\uff0c\u4f7f\u5176\u65e0\u9700 ROS2 \u7f16\u8bd1\u5668\u3002 \u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5728\u8fd0\u884c\u65f6\u5c06\u6bcf\u6761\u6d88\u606f\u8f6c\u6362\u4e3a arrow struct \u683c\u5f0f\u3002 \u8fd9\u53ef\u5feb\u901f\u4f7f\u7528AI\u6a21\u578b\uff0c\u901a\u8fc7numpy\u3001pandas\uff0c...",source:"@site/i18n/zh-CN/docusaurus-plugin-content-docs/current/guides/dora-ros2-bridges/dora-ros2-bridges.md",sourceDirName:"guides/dora-ros2-bridges",slug:"/guides/dora-ros2-bridges/",permalink:"/zh-CN/docs/guides/dora-ros2-bridges/",draft:!1,editUrl:"https://crowdin.com/dora-rs/zh-CN",tags:[],version:"current",frontMatter:{},sidebar:"guides",previous:{title:"\u63a7\u5236",permalink:"/zh-CN/docs/guides/dora-drives/control"},next:{title:"\u652f\u6301\u77e9\u9635",permalink:"/zh-CN/docs/guides/support-matrix"}},l={},d=[{value:"\u4ec0\u4e48\u662f dora-ros2-bridge ?",id:"\u4ec0\u4e48\u662f-dora-ros2-bridge-",level:2},{value:"\u4ece Python \u5f00\u59cb",id:"\u4ece-python-\u5f00\u59cb",level:2},{value:"\u4ece Rust \u5f00\u59cb",id:"\u4ece-rust-\u5f00\u59cb",level:2}],c={toc:d},u="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u6865\u63a5-ros2"},"\u6865\u63a5 ROS2"),(0,o.kt)("p",null,"dora-ros2-bridge \u662f\u6211\u4eec\u4e3a\u4eba\u4eec\u8f7b\u677e\u4f7f\u7528 ROS2 \u6784\u5efa\u7684\u6269\u5c55\u3002 ROS2 \u7684\u4e3b\u8981\u95ee\u9898\u4e4b\u4e00\u662f\u590d\u6742\u7684\u6784\u5efa\u7cfb\u7edf\u3002 \u4eba\u4eec\u5f88\u96be\u5728 ros2 \u6784\u5efa\u7cfb\u7edf\u4e4b\u4e0a\u4f7f\u7528 dora\uff0c\u56e0\u6b64\u6211\u4eec\u6784\u5efa\u4e86\u8fd9\u4e2a\u6865\uff0c\u4f7f\u5176\u65e0\u9700 ROS2 \u7f16\u8bd1\u5668\u3002 \u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5728\u8fd0\u884c\u65f6\u5c06\u6bcf\u6761\u6d88\u606f\u8f6c\u6362\u4e3a arrow struct \u683c\u5f0f\u3002 \u8fd9\u53ef\u5feb\u901f\u4f7f\u7528AI\u6a21\u578b\uff0c\u901a\u8fc7numpy\u3001pandas\uff0c..."),(0,o.kt)("h2",{id:"\u4ec0\u4e48\u662f-dora-ros2-bridge-"},"\u4ec0\u4e48\u662f dora-ros2-bridge ?"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u89c1\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://github.com/orgs/dora-rs/discussions/306"},"https://github.com/orgs/dora-rs/discussions/306"))),(0,o.kt)("p",null,"\u5f53\u524d\u7684\u673a\u5668\u4eba\u793e\u533a\u4f7f\u7528\u5927\u91cf ROS2 \u6765\u6784\u5efa\u673a\u5668\u4eba\u3002 \u4ed6\u4eec\u5f88\u96be\u5b8c\u5168\u4ece ROS2 \u5207\u6362\u3002 \u4e3a ROS 2 \u6784\u5efa\u6613\u4e8e\u4f7f\u7528\u7684\u6865\u63a5\u6709\u52a9\u4e8e\u63d0\u4f9b\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u96c6\u6210\u548c\u8f6c\u6362\u9879\u76ee\u5230 dora \u6216\u4ece dora \u8f6c\u6362\u9879\u76ee\u3002 \u8fd9\u4e5f\u4f7f\u5f97\u91cd\u7528\u4e0d\u63d0\u4f9b\u4efb\u4f55\u5176\u4ed6 API \u7684 ROS2 \u4f20\u611f\u5668\u8282\u70b9\u53d8\u5f97\u5bb9\u6613\u3002"),(0,o.kt)("h2",{id:"\u4ece-python-\u5f00\u59cb"},"\u4ece Python \u5f00\u59cb"),(0,o.kt)("p",null,"\u4ee5\u4e0b\u793a\u4f8b\u53ef\u4ee5\u4f7f\u7528 dora \u64cd\u4f5c\u4e00\u4e2a ROS2 turtlebot \u7684\u6a21\u62df\u5668\u3002 \u5b83\u4e0d\u9700\u8981 colcon \u7684\u4efb\u4f55\u7f16\u8bd1\uff0c\u53ea\u9700\u8981\u4f7f\u7528 dora \u8fd0\u884c\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport dora\nfrom dora import Node\n\nros2_context = dora.experimental.ros2_bridge.Ros2Context()\nros2_node = ros2_context.new_node(\n    "turtle_teleop", # name\n    "/ros2_demo", # namespace\n    dora.experimental.ros2_bridge.Ros2NodeOptions(rosout=True),\n)\n\n# Define a ROS2 QOS\ntopic_qos = dora.experimental.ros2_bridge.Ros2QosPolicies(\n    reliable=True, max_blocking_time=0.1\n)\n\n# Create a publisher to cmd_vel topic\nturtle_twist_topic = ros2_node.create_topic(\n    "/turtle1/cmd_vel", "geometry_msgs/Twist", topic_qos\n)\ntwist_writer = ros2_node.create_publisher(turtle_twist_topic)\n\n# Create a listener to pose topic\nturtle_pose_topic = ros2_node.create_topic(\n    "/turtle1/pose", "turtlesim/Pose", topic_qos\n)\npose_reader = ros2_node.create_subscription(turtle_pose_topic)\n\n# Create a dora node\ndora_node = Node()\n\n# Listen for both stream on the same loop as Python does not handle well multiprocessing\ndora_node.merge_external_events(pose_reader)\n\nfor i in range(500):\n    event = dora_node.next()\n    if event is None:\n        break\n    match event["kind"]:\n\n        # Dora event\n        case "dora":\n            match event["type"]:\n                case "INPUT":\n                    match event["id"]:\n                        case "direction":\n                            twist_writer.publish(event["value"])\n\n        # In this case ROS2 event\n        case "external":\n            pose = event.inner()[0].as_py()\n            dora_node.send_output("turtle_pose", event.inner())\n')),(0,o.kt)("h2",{id:"\u4ece-rust-\u5f00\u59cb"},"\u4ece Rust \u5f00\u59cb"),(0,o.kt)("p",null,"\u4ee5\u4e0b\u793a\u4f8b\u53ef\u4ee5\u4f7f\u7528 dora \u64cd\u4f5c ROS2 turtlebot\u3002 \u5b83\u4e0d\u9700\u8981colcon\uff0c\u53ea\u9700\u8981\u7528",(0,o.kt)("inlineCode",{parentName:"p"},"cargo"),"\u8fdb\u884c\u672c\u5730\u7f16\u8bd1\uff0c\u7136\u540e\u7528dora\u8fd0\u884c\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'use dora_node_api::{\n    self,\n    dora_core::config::DataId,\n    merged::{MergeExternal, MergedEvent},\n    DoraNode, Event,\n};\nuse dora_ros2_bridge::{\n    geometry_msgs::msg::{Twist, Vector3},\n    ros2_client::{self, ros2, NodeOptions},\n    rustdds::{self, policy},\n    turtlesim::msg::Pose,\n};\nuse eyre::Context;\n\nfn main() -> eyre::Result<()> {\n    let mut ros_node = init_ros_node()?;\n    let turtle_vel_publisher = create_vel_publisher(&mut ros_node)?;\n    let turtle_pose_reader = create_pose_reader(&mut ros_node)?;\n\n    // \u521d\u59cb\u5316 dora \u8282\u70b9\n    let output = DataId::from("pose".to_owned());\n    let (mut node, dora_events) = DoraNode::init_from_env()?;\n\n    // \u5408\u5e76\u6d41\u81f3\u4e00\u4e2a\u5faa\u73af\n    let merged = dora_events.merge_external(Box::pin(turtle_pose_reader.async_stream()));\n    let mut events = futures::executor::block_on_stream(merged);\n\n    for i in 0..1000 {\n        let event = match events.next() {\n            Some(input) => input,\n            None => break,\n        };\n\n        match event {\n            MergedEvent::Dora(event) => match event {\n                Event::Input {\n                    id,\n                    metadata: _,\n                    data: _,\n                } => match id.as_str() {\n                    "tick" => {\n                        let direction = Twist {\n                            linear: Vector3 {\n                                x: rand::random::<f64>() + 1.0,\n                                ..Default::default()\n                            },\n                            angular: Vector3 {\n                                z: (rand::random::<f64>() - 0.5) * 5.0,\n                                ..Default::default()\n                            },\n                        };\n                        println!("tick {i}, sending {direction:?}");\n                        turtle_vel_publisher.publish(direction).unwrap();\n                    }\n                    other => eprintln!("Ignoring unexpected input `{other}`"),\n                },\n                Event::Stop => println!("Received manual stop"),\n                other => eprintln!("Received unexpected input: {other:?}"),\n            },\n            MergedEvent::External(pose) => {\n                println!("received pose event: {pose:?}");\n                if let Ok((pose, _)) = pose {\n                    let serialized = serde_json::to_string(&pose)?;\n                    node.send_output_bytes(\n                        output.clone(),\n                        Default::default(),\n                        serialized.len(),\n                        serialized.as_bytes(),\n                    )?;\n                }\n            }\n        }\n    }\n\n    Ok(())\n}\n\nfn init_ros_node() -> eyre::Result<ros2_client::Node> {\n    let ros_context = ros2_client::Context::new().unwrap();\n\n    ros_context\n        .new_node(\n            "turtle_teleop", // \u540d\u79f0\n            "/ros2_demo",    // \u540d\u5b57\u7a7a\u95f4\n            NodeOptions::new().enable_rosout(true),\n        )\n        .context("failed to create ros2 node")\n}\n\n// \u53d1\u5e03\u5728 vel_cmd \u4e3b\u9898\nfn create_vel_publisher(\n    ros_node: &mut ros2_client::Node,\n) -> eyre::Result<ros2_client::Publisher<Twist>> {\n    let topic_qos: rustdds::QosPolicies = {\n        rustdds::QosPolicyBuilder::new()\n            .durability(policy::Durability::Volatile)\n            .liveliness(policy::Liveliness::Automatic {\n                lease_duration: ros2::Duration::DURATION_INFINITE,\n            })\n            .reliability(policy::Reliability::Reliable {\n                max_blocking_time: ros2::Duration::from_millis(100),\n            })\n            .history(policy::History::KeepLast { depth: 1 })\n            .build()\n    };\n\n    let turtle_cmd_vel_topic = ros_node\n        .create_topic(\n            "/turtle1/cmd_vel",\n            String::from("geometry_msgs::msg::dds_::Twist_"),\n            &topic_qos,\n        )\n        .context("failed to create topic")?;\n\n    // \u8fd9\u91cc\u7684\u91cd\u70b9\u662f\u4e3a turtle \u53d1\u5e03 Twist\n    let turtle_cmd_vel_writer = ros_node\n        .create_publisher::<Twist>(&turtle_cmd_vel_topic, None)\n        .context("failed to create publisher")?;\n    Ok(turtle_cmd_vel_writer)\n}\n\n// \u76d1\u542c pose \u4e3b\u9898\nfn create_pose_reader(\n    ros_node: &mut ros2_client::Node,\n) -> eyre::Result<ros2_client::Subscription<Pose>> {\n    let turtle_pose_topic = ros_node\n        .create_topic(\n            "/turtle1/pose",\n            String::from("turtlesim::msg::dds_::Pose_"),\n            &Default::default(),\n        )\n        .context("failed to create topic")?;\n    let turtle_pose_reader = ros_node\n        .create_subscription::<Pose>(&turtle_pose_topic, None)\n        .context("failed to create subscription")?;\n    Ok(turtle_pose_reader)\n}\n\n')))}p.isMDXComponent=!0}}]);