"use strict";(self.webpackChunkdora_rs_github_io=self.webpackChunkdora_rs_github_io||[]).push([[9195],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>_});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),s=u(n),m=o,_=s["".concat(p,".").concat(m)]||s[m]||d[m]||a;return n?r.createElement(_,l(l({ref:t},c),{},{components:n})):r.createElement(_,l({ref:t},c))}));function _(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[s]="string"==typeof e?e:o,l[1]=i;for(var u=2;u<a;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5265:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const a={},l="Webcam (\u6444\u50cf\u5934) \u64cd\u4f5c\u7b26",i={unversionedId:"nodes_operators/webcam_op",id:"nodes_operators/webcam_op",title:"Webcam (\u6444\u50cf\u5934) \u64cd\u4f5c\u7b26",description:"\u8f93\u5165",source:"@site/i18n/zh-CN/docusaurus-plugin-content-docs/current/nodes_operators/webcam_op.md",sourceDirName:"nodes_operators",slug:"/nodes_operators/webcam_op",permalink:"/zh-CN/docs/nodes_operators/webcam_op",draft:!1,editUrl:"https://crowdin.com/dora-rs/zh-CN",tags:[],version:"current",frontMatter:{},sidebar:"nodes_operators",previous:{title:"Strong Sort (strong deep learning for simple online and realtime tracking, \u5f3a\u5316\u6df1\u5ea6\u5b66\u4e60\u7f51\u7edc\u7684\u7b80\u5355\u5728\u7ebf\u4e0e\u5b9e\u65f6\u8ddf\u8e2a) \u64cd\u4f5c\u7b26",permalink:"/zh-CN/docs/nodes_operators/strong_sort_op"},next:{title:"yolop \u64cd\u4f5c\u7b26",permalink:"/zh-CN/docs/nodes_operators/yolop_op"}},p={},u=[{value:"\u8f93\u5165",id:"\u8f93\u5165",level:2},{value:"\u8f93\u51fa",id:"\u8f93\u51fa",level:2},{value:"\u914d\u7f6e",id:"\u914d\u7f6e",level:2},{value:"\u56fe\u63cf\u8ff0",id:"\u56fe\u63cf\u8ff0",level:2},{value:"\u65b9\u6cd5",id:"\u65b9\u6cd5",level:2},{value:"<code>__init__()</code>",id:"__init__",level:3},{value:"<code>.on_event(...)</code>",id:"on_event",level:3},{value:"<code>.on_input(...)</code>",id:"on_input",level:3}],c={toc:u},s="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(s,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"webcam-\u6444\u50cf\u5934-\u64cd\u4f5c\u7b26"},"Webcam (\u6444\u50cf\u5934) \u64cd\u4f5c\u7b26"),(0,o.kt)("h2",{id:"\u8f93\u5165"},"\u8f93\u5165"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"tick: Dora tick.")),(0,o.kt)("h2",{id:"\u8f93\u51fa"},"\u8f93\u51fa"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u56fe\u50cf: \u9ad8 x \u5bbd x BGR array.")),(0,o.kt)("h2",{id:"\u914d\u7f6e"},"\u914d\u7f6e"),(0,o.kt)("p",null,"\u4f7f\u7528 cv2 \u5305\u83b7\u53d6\u6444\u50cf\u5934\u56fe\u50cf\u3002 \u6444\u5934\u53f7\u53ef\u88ab\u4f7f\u7528 ",(0,o.kt)("inlineCode",{parentName:"p"},"CAMERA_INDEX")," \u914d\u7f6e"),(0,o.kt)("h2",{id:"\u56fe\u63cf\u8ff0"},"\u56fe\u63cf\u8ff0"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"  - id: yolov5\n    operator: \n      outputs:\n        - bbox\n      inputs:\n        image: webcam/image\n      python: ../../operators/webcam_op.py\n")),(0,o.kt)("h2",{id:"\u65b9\u6cd5"},"\u65b9\u6cd5"),(0,o.kt)("h3",{id:"__init__"},(0,o.kt)("inlineCode",{parentName:"h3"},"__init__()")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"\u6e90\u7801"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"    def __init__(self):\n        self.video_capture = cv2.VideoCapture(int(DEVICE_INDEX))\n        self.video_capture.set(cv2.CAP_PROP_FRAME_WIDTH, OUTPUT_WIDTH)\n        self.video_capture.set(cv2.CAP_PROP_FRAME_HEIGHT, OUTPUT_HEIGHT)\n\n\n"))),(0,o.kt)("h3",{id:"on_event"},(0,o.kt)("inlineCode",{parentName:"h3"},".on_event(...)")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"\u6e90\u7801"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\n    def on_event(\n        self,\n        dora_event: dict,\n        send_output: Callable[[str, bytes], None],\n    ) -> DoraStatus:\n        if dora_event["type"] == "INPUT":\n            return self.on_input(dora_event, send_output)\n        return DoraStatus.CONTINUE\n\n\n'))),(0,o.kt)("h3",{id:"on_input"},(0,o.kt)("inlineCode",{parentName:"h3"},".on_input(...)")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"\u6e90\u7801"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\n    def on_input(\n        self,\n        dora_input: dict,\n        send_output: Callable[[str, bytes], None],\n    ):\n        ret, frame = self.video_capture.read()\n        if ret:\n            frame = cv2.resize(frame, (OUTPUT_WIDTH, OUTPUT_HEIGHT))\n            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2BGRA)\n            send_output(\n                "image",\n                pa.array(frame.ravel()),\n                dora_input["metadata"],\n            )\n        else:\n            print("could not get webcam.")\n        return DoraStatus.CONTINUE\n\n\n'))))}d.isMDXComponent=!0}}]);