"use strict";(self.webpackChunkdora_rs_github_io=self.webpackChunkdora_rs_github_io||[]).push([[1646],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>_});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(t),y=o,_=d["".concat(u,".").concat(y)]||d[y]||c[y]||a;return t?r.createElement(_,l(l({ref:n},p),{},{components:t})):r.createElement(_,l({ref:n},p))}));function _(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=y;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},127:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=t(7462),o=(t(7294),t(3905));const a={},l="Yolov5 Operator",i={unversionedId:"nodes_operators/yolov5_op",id:"nodes_operators/yolov5_op",title:"Yolov5 Operator",description:"\x3c!---",source:"@site/i18n/zh-CN/docusaurus-plugin-content-docs/current/nodes_operators/yolov5_op.md",sourceDirName:"nodes_operators",slug:"/nodes_operators/yolov5_op",permalink:"/zh-CN/docs/nodes_operators/yolov5_op",draft:!1,editUrl:"https://crowdin.com/dora-rs/zh-CN",tags:[],version:"current",frontMatter:{},sidebar:"nodes_operators",previous:{title:"YOLOP Operator",permalink:"/zh-CN/docs/nodes_operators/yolop_op"}},u={},s=[{value:"<code>__init__()</code>",id:"__init__",level:3},{value:"<code>.on_event(...)</code>",id:"on_event",level:3},{value:"<code>.on_input(...)</code>",id:"on_input",level:3}],p={toc:s},d="wrapper";function c(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"yolov5-operator"},"Yolov5 Operator"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\n    Send `bbox` found by YOLOv5 on given `image`\n\n")),(0,o.kt)("h3",{id:"__init__"},(0,o.kt)("inlineCode",{parentName:"h3"},"__init__()")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Source Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'    def __init__(self):\n        if YOLOV5_PATH is None:\n            # With internet\n            self.model = torch.hub.load(\n                "ultralytics/yolov5",\n                "yolov5n",\n            )\n        else:\n            # Without internet\n            #\n            # To install:\n            # cd $DORA_HOME_DEP/dependecies # Optional\n            # git clone https://github.com/ultralytics/yolov5.git\n            # rm yolov5/.git -rf\n            # Add YOLOV5_PATH and YOLOV5_WEIGHT_PATH in your YAML graph\n\n            self.model = torch.hub.load(\n                YOLOV5_PATH,\n                "custom",\n                path=YOLOV5_WEIGHT_PATH,\n                source="local",\n            )\n\n        self.model.to(torch.device(DEVICE))\n        self.model.eval()\n\n\n'))),(0,o.kt)("h3",{id:"on_event"},(0,o.kt)("inlineCode",{parentName:"h3"},".on_event(...)")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Source Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\n    def on_event(\n        self,\n        dora_event: dict,\n        send_output: Callable[[str, bytes], None],\n    ) -> DoraStatus:\n        if dora_event["type"] == "INPUT":\n            return self.on_input(dora_event, send_output)\n        return DoraStatus.CONTINUE\n\n\n'))),(0,o.kt)("h3",{id:"on_input"},(0,o.kt)("inlineCode",{parentName:"h3"},".on_input(...)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    Handle image\n    Args:\n        dora_input["id"](str): Id of the input declared in the yaml configuration\n        dora_input["value"] (arrow.array (UInt8)): Bytes message of the input\n        send_output (Callable[[str, bytes]]): Function enabling sending output back to dora.\n')),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Source Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\n    def on_input(\n        self,\n        dora_input: dict,\n        send_output: Callable[[str, bytes], None],\n    ) -> DoraStatus:\n        """\n        Handle image\n        Args:\n            dora_input["id"](str): Id of the input declared in the yaml configuration\n            dora_input["value"] (arrow.array (UInt8)): Bytes message of the input\n            send_output (Callable[[str, bytes]]): Function enabling sending output back to dora.\n        """\n        if dora_input["id"] == "image":\n            frame = (\n                dora_input["value"]\n                .to_numpy()\n                .reshape((IMAGE_HEIGHT, IMAGE_WIDTH, 4))\n            )\n            frame = frame[:, :, :3]\n\n            results = self.model(frame)  # includes NMS\n            arrays = np.array(results.xyxy[0].cpu())[\n                :, [0, 2, 1, 3, 4, 5]\n            ]  # xyxy -> xxyy\n            arrays[:, 4] *= 100\n            arrays = arrays.astype(np.int32)\n            arrays = pa.array(arrays.ravel().view(np.uint8))\n            send_output("bbox", arrays, dora_input["metadata"])\n            return DoraStatus.CONTINUE\n\n\n'))))}c.isMDXComponent=!0}}]);