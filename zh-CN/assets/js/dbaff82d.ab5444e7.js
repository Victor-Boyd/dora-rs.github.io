"use strict";(self.webpackChunkdora_rs_github_io=self.webpackChunkdora_rs_github_io||[]).push([[8729],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),l=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},_=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),u=l(n),_=r,f=u["".concat(s,".").concat(_)]||u[_]||c[_]||a;return n?o.createElement(f,i(i({ref:t},d),{},{components:n})):o.createElement(f,i({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=_;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[u]="string"==typeof e?e:r,i[1]=p;for(var l=2;l<a;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}_.displayName="MDXCreateElement"},6654:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var o=n(7462),r=(n(7294),n(3905));const a={},i="PID Control operator",p={unversionedId:"nodes_operators/pid_control_op",id:"nodes_operators/pid_control_op",title:"PID Control operator",description:"pid control operator computes the command that needs to be executed to follow the given waypoints. It reacts to the car current speed and position in a way that accelerates or brake according to previous inputs.",source:"@site/i18n/zh-CN/docusaurus-plugin-content-docs/current/nodes_operators/pid_control_op.md",sourceDirName:"nodes_operators",slug:"/nodes_operators/pid_control_op",permalink:"/zh-CN/docs/nodes_operators/pid_control_op",draft:!1,editUrl:"https://crowdin.com/dora-rs/zh-CN",tags:[],version:"current",frontMatter:{},sidebar:"nodes_operators",previous:{title:"Obstacle location operator",permalink:"/zh-CN/docs/nodes_operators/obstacle_location_op"},next:{title:"Plot operator",permalink:"/zh-CN/docs/nodes_operators/plot"}},s={},l=[{value:"Inputs",id:"inputs",level:2},{value:"Outputs",id:"outputs",level:2},{value:"Graph Description",id:"graph-description",level:2},{value:"Graph Viz",id:"graph-viz",level:2},{value:"Hyperparameters consider changing",id:"hyperparameters-consider-changing",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>__init__()</code>",id:"__init__",level:3},{value:"<code>.on_event(...)</code>",id:"on_event",level:3},{value:"<code>.on_input(...)</code>",id:"on_input",level:3}],d={toc:l},u="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"pid-control-operator"},"PID Control operator"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"pid")," control operator computes the command that needs to be executed to follow the given waypoints. It reacts to the car current speed and position in a way that accelerates or brake according to previous inputs."),(0,r.kt)("h2",{id:"inputs"},"Inputs"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"waypoints coordinates to follow.")),(0,r.kt)("h2",{id:"outputs"},"Outputs"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"throttle, steering (rad) and braking.")),(0,r.kt)("h2",{id:"graph-description"},"Graph Description"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"  - id: pid_control_op\n    operator:\n      python: ../../operators/pid_control_op.py\n      outputs:\n        - control\n      inputs:\n        position: oasis_agent/position\n        speed: oasis_agent/speed\n        waypoints: fot_op/waypoints\n")),(0,r.kt)("h2",{id:"graph-viz"},"Graph Viz"),(0,r.kt)("mermaid",{value:"        flowchart TB\n  oasis_agent\nsubgraph fot_op\n  fot_op/op[op]\nend\nsubgraph pid_control_op\n  pid_control_op/op[op]\nend\n  oasis_agent -- position --\x3e pid_control_op/op\n  oasis_agent -- speed --\x3e pid_control_op/op\n  fot_op/op -- waypoints --\x3e pid_control_op/op\n  pid_control_op/op -- control --\x3e oasis_agent"}),(0,r.kt)("h2",{id:"hyperparameters-consider-changing"},"Hyperparameters consider changing"),(0,r.kt)("p",null,"See: ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/PID_controller"},"https://en.wikipedia.org/wiki/PID_controller")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"pid_p = 0.1\npid_d = 0.0\npid_i = 0.05\ndt = 1.0 / 20   \n")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"__init__"},(0,r.kt)("inlineCode",{parentName:"h3"},"__init__()")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Source Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"    def __init__(self):\n        self.waypoints = []\n        self.target_speeds = []\n        self.metadata = {}\n        self.position = []\n        self.speed = []\n        self.previous_position = []\n        self.current_speed = []\n        self.previous_time = time.time()\n\n\n"))),(0,r.kt)("h3",{id:"on_event"},(0,r.kt)("inlineCode",{parentName:"h3"},".on_event(...)")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Source Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\n    def on_event(\n        self,\n        dora_event: dict,\n        send_output: Callable[[str, bytes], None],\n    ) -> DoraStatus:\n        if dora_event["type"] == "INPUT":\n            return self.on_input(dora_event, send_output)\n        return DoraStatus.CONTINUE\n\n\n'))),(0,r.kt)("h3",{id:"on_input"},(0,r.kt)("inlineCode",{parentName:"h3"},".on_input(...)")),(0,r.kt)("p",null,"Handle input. Args: dora_input","[",'"id"',"]","  (str): Id of the input declared in the yaml configuration dora_input","[",'"value"',"]"," (arrow.array(UInt8)): Bytes message of the input send_output (Callable[","[str, bytes]","]): Function enabling sending output back to dora."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Source Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\n    def on_input(\n        self,\n        dora_input: dict,\n        send_output: Callable[[str, bytes], None],\n    ):\n        """Handle input.\n        Args:\n            dora_input["id"]  (str): Id of the input declared in the yaml configuration\n            dora_input["value"] (arrow.array(UInt8)): Bytes message of the input\n            send_output (Callable[[str, bytes]]): Function enabling sending output back to dora.\n        """\n\n        if "position" == dora_input["id"]:\n            self.position = dora_input["value"].to_numpy().view(np.float32)\n            return DoraStatus.CONTINUE\n\n        elif dora_input["id"] == "speed":\n            self.speed = np.array(dora_input["value"]).view(np.float32)\n            return DoraStatus.CONTINUE\n\n        elif "waypoints" == dora_input["id"]:\n            waypoints = dora_input["value"].to_numpy().view(np.float32)\n            waypoints = waypoints.reshape((-1, 3))\n\n            self.target_speeds = waypoints[:, 2]\n            self.waypoints = waypoints[:, :2]\n            self.metadata = dora_input["metadata"]\n\n        if len(self.position) == 0 or len(self.speed) == 0:\n            return DoraStatus.CONTINUE\n\n        if len(self.waypoints) == 0:\n            send_output(\n                "control",\n                pa.array(\n                    np.array([0, 0, 1], np.float16).view(np.uint8).ravel()\n                ),\n                self.metadata,\n            )\n            return DoraStatus.CONTINUE\n\n        [x, y, _, rx, ry, rz, rw] = self.position\n        [_, _, yaw] = R.from_quat([rx, ry, rz, rw]).as_euler(\n            "xyz", degrees=False\n        )\n        distances = pairwise_distances(self.waypoints, np.array([[x, y]])).T[0]\n\n        index = distances > MIN_PID_WAYPOINT_DISTANCE\n        self.waypoints = self.waypoints[index]\n        self.target_speeds = self.target_speeds[index]\n        distances = distances[index]\n\n        if len(self.waypoints) == 0:\n            target_angle = 0\n            target_speed = 0\n        else:\n            argmin_distance = np.argmin(distances)\n\n            ## Retrieve the closest point to the steer distance\n            target_location = self.waypoints[argmin_distance]\n\n            target_speed = self.target_speeds[argmin_distance]\n\n            ## Compute the angle of steering\n            target_vector = target_location - [x, y]\n\n            target_angle = get_angle(\n                math.atan2(target_vector[1], target_vector[0]), yaw\n            )\n\n        throttle, brake = compute_throttle_and_brake(\n            pid, LA.norm(self.speed), target_speed\n        )\n\n        send_output(\n            "control",\n            pa.array(\n                np.array([throttle, target_angle, brake], np.float16).view(\n                    np.uint8\n                )\n            ),\n            self.metadata,\n        )\n        return DoraStatus.CONTINUE\n\n\n'))))}c.isMDXComponent=!0}}]);